/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Service to call Cloud DocumentAI to process documents according to the
 *  processor's definition. Processors are built using state-of-the-art Google
 *  AI such as natural language, computer vision, and translation to extract
 *  structured information from unstructured or semi-structured documents.
 * @class
 * @memberof v1
 */
export declare class DocumentProcessorServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    documentProcessorServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of DocumentProcessorServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
     *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new DocumentProcessorServiceClient({fallback: 'rest'}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Processes a single document.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.documentai.v1.Document} request.inlineDocument
     *   An inline document proto.
     * @param {google.cloud.documentai.v1.RawDocument} request.rawDocument
     *   A raw document content (bytes).
     * @param {string} request.name
     *   Required. The resource name of the
     *   {@link google.cloud.documentai.v1.Processor|Processor} or
     *   {@link google.cloud.documentai.v1.ProcessorVersion|ProcessorVersion}
     *   to use for processing. If a
     *   {@link google.cloud.documentai.v1.Processor|Processor} is specified, the server
     *   will use its [default
     *   version][google.cloud.documentai.v1.Processor.default_processor_version].
     *   Format: `projects/{project}/locations/{location}/processors/{processor}`,
     *   or
     *   `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`
     * @param {boolean} request.skipHumanReview
     *   Whether Human Review feature should be skipped for this request. Default to
     *   false.
     * @param {google.protobuf.FieldMask} request.fieldMask
     *   Specifies which fields to include in ProcessResponse's document.
     *   Only supports top level document and pages field so it must be in the form
     *   of `{document_field_name}` or `pages.{page_field_name}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.documentai.v1.ProcessResponse | ProcessResponse}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.process_document.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_ProcessDocument_async
     */
    processDocument(request?: protos.google.cloud.documentai.v1.IProcessRequest, options?: CallOptions): Promise<[
        protos.google.cloud.documentai.v1.IProcessResponse,
        protos.google.cloud.documentai.v1.IProcessRequest | undefined,
        {} | undefined
    ]>;
    processDocument(request: protos.google.cloud.documentai.v1.IProcessRequest, options: CallOptions, callback: Callback<protos.google.cloud.documentai.v1.IProcessResponse, protos.google.cloud.documentai.v1.IProcessRequest | null | undefined, {} | null | undefined>): void;
    processDocument(request: protos.google.cloud.documentai.v1.IProcessRequest, callback: Callback<protos.google.cloud.documentai.v1.IProcessResponse, protos.google.cloud.documentai.v1.IProcessRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Fetches processor types. Note that we do not use ListProcessorTypes here
     * because it is not paginated.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project of processor type to list.
     *   The available processor types may depend on the allow-listing on projects.
     *   Format: `projects/{project}/locations/{location}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.documentai.v1.FetchProcessorTypesResponse | FetchProcessorTypesResponse}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.fetch_processor_types.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_FetchProcessorTypes_async
     */
    fetchProcessorTypes(request?: protos.google.cloud.documentai.v1.IFetchProcessorTypesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.documentai.v1.IFetchProcessorTypesResponse,
        protos.google.cloud.documentai.v1.IFetchProcessorTypesRequest | undefined,
        {} | undefined
    ]>;
    fetchProcessorTypes(request: protos.google.cloud.documentai.v1.IFetchProcessorTypesRequest, options: CallOptions, callback: Callback<protos.google.cloud.documentai.v1.IFetchProcessorTypesResponse, protos.google.cloud.documentai.v1.IFetchProcessorTypesRequest | null | undefined, {} | null | undefined>): void;
    fetchProcessorTypes(request: protos.google.cloud.documentai.v1.IFetchProcessorTypesRequest, callback: Callback<protos.google.cloud.documentai.v1.IFetchProcessorTypesResponse, protos.google.cloud.documentai.v1.IFetchProcessorTypesRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets a processor type detail.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The processor type resource name.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.documentai.v1.ProcessorType | ProcessorType}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.get_processor_type.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_GetProcessorType_async
     */
    getProcessorType(request?: protos.google.cloud.documentai.v1.IGetProcessorTypeRequest, options?: CallOptions): Promise<[
        protos.google.cloud.documentai.v1.IProcessorType,
        protos.google.cloud.documentai.v1.IGetProcessorTypeRequest | undefined,
        {} | undefined
    ]>;
    getProcessorType(request: protos.google.cloud.documentai.v1.IGetProcessorTypeRequest, options: CallOptions, callback: Callback<protos.google.cloud.documentai.v1.IProcessorType, protos.google.cloud.documentai.v1.IGetProcessorTypeRequest | null | undefined, {} | null | undefined>): void;
    getProcessorType(request: protos.google.cloud.documentai.v1.IGetProcessorTypeRequest, callback: Callback<protos.google.cloud.documentai.v1.IProcessorType, protos.google.cloud.documentai.v1.IGetProcessorTypeRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets a processor detail.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The processor resource name.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.documentai.v1.Processor | Processor}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.get_processor.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_GetProcessor_async
     */
    getProcessor(request?: protos.google.cloud.documentai.v1.IGetProcessorRequest, options?: CallOptions): Promise<[
        protos.google.cloud.documentai.v1.IProcessor,
        protos.google.cloud.documentai.v1.IGetProcessorRequest | undefined,
        {} | undefined
    ]>;
    getProcessor(request: protos.google.cloud.documentai.v1.IGetProcessorRequest, options: CallOptions, callback: Callback<protos.google.cloud.documentai.v1.IProcessor, protos.google.cloud.documentai.v1.IGetProcessorRequest | null | undefined, {} | null | undefined>): void;
    getProcessor(request: protos.google.cloud.documentai.v1.IGetProcessorRequest, callback: Callback<protos.google.cloud.documentai.v1.IProcessor, protos.google.cloud.documentai.v1.IGetProcessorRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets a processor version detail.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The processor resource name.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.documentai.v1.ProcessorVersion | ProcessorVersion}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.get_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_GetProcessorVersion_async
     */
    getProcessorVersion(request?: protos.google.cloud.documentai.v1.IGetProcessorVersionRequest, options?: CallOptions): Promise<[
        protos.google.cloud.documentai.v1.IProcessorVersion,
        protos.google.cloud.documentai.v1.IGetProcessorVersionRequest | undefined,
        {} | undefined
    ]>;
    getProcessorVersion(request: protos.google.cloud.documentai.v1.IGetProcessorVersionRequest, options: CallOptions, callback: Callback<protos.google.cloud.documentai.v1.IProcessorVersion, protos.google.cloud.documentai.v1.IGetProcessorVersionRequest | null | undefined, {} | null | undefined>): void;
    getProcessorVersion(request: protos.google.cloud.documentai.v1.IGetProcessorVersionRequest, callback: Callback<protos.google.cloud.documentai.v1.IProcessorVersion, protos.google.cloud.documentai.v1.IGetProcessorVersionRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a processor from the type processor that the user chose.
     * The processor will be at "ENABLED" state by default after its creation.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project and location) under which to create the
     *   processor. Format: `projects/{project}/locations/{location}`
     * @param {google.cloud.documentai.v1.Processor} request.processor
     *   Required. The processor to be created, requires [processor_type] and
     *   [display_name] to be set. Also, the processor is under CMEK if CMEK fields
     *   are set.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.documentai.v1.Processor | Processor}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.create_processor.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_CreateProcessor_async
     */
    createProcessor(request?: protos.google.cloud.documentai.v1.ICreateProcessorRequest, options?: CallOptions): Promise<[
        protos.google.cloud.documentai.v1.IProcessor,
        protos.google.cloud.documentai.v1.ICreateProcessorRequest | undefined,
        {} | undefined
    ]>;
    createProcessor(request: protos.google.cloud.documentai.v1.ICreateProcessorRequest, options: CallOptions, callback: Callback<protos.google.cloud.documentai.v1.IProcessor, protos.google.cloud.documentai.v1.ICreateProcessorRequest | null | undefined, {} | null | undefined>): void;
    createProcessor(request: protos.google.cloud.documentai.v1.ICreateProcessorRequest, callback: Callback<protos.google.cloud.documentai.v1.IProcessor, protos.google.cloud.documentai.v1.ICreateProcessorRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Retrieves a specific evaluation.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the
     *   {@link google.cloud.documentai.v1.Evaluation|Evaluation} to get.
     *   `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}/evaluations/{evaluation}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.documentai.v1.Evaluation | Evaluation}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.get_evaluation.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_GetEvaluation_async
     */
    getEvaluation(request?: protos.google.cloud.documentai.v1.IGetEvaluationRequest, options?: CallOptions): Promise<[
        protos.google.cloud.documentai.v1.IEvaluation,
        protos.google.cloud.documentai.v1.IGetEvaluationRequest | undefined,
        {} | undefined
    ]>;
    getEvaluation(request: protos.google.cloud.documentai.v1.IGetEvaluationRequest, options: CallOptions, callback: Callback<protos.google.cloud.documentai.v1.IEvaluation, protos.google.cloud.documentai.v1.IGetEvaluationRequest | null | undefined, {} | null | undefined>): void;
    getEvaluation(request: protos.google.cloud.documentai.v1.IGetEvaluationRequest, callback: Callback<protos.google.cloud.documentai.v1.IEvaluation, protos.google.cloud.documentai.v1.IGetEvaluationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * LRO endpoint to batch process many documents. The output is written
     * to Cloud Storage as JSON in the [Document] format.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of
     *   {@link google.cloud.documentai.v1.Processor|Processor} or
     *   {@link google.cloud.documentai.v1.ProcessorVersion|ProcessorVersion}.
     *   Format: `projects/{project}/locations/{location}/processors/{processor}`,
     *   or
     *   `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`
     * @param {google.cloud.documentai.v1.BatchDocumentsInputConfig} request.inputDocuments
     *   The input documents for batch process.
     * @param {google.cloud.documentai.v1.DocumentOutputConfig} request.documentOutputConfig
     *   The overall output config for batch process.
     * @param {boolean} request.skipHumanReview
     *   Whether Human Review feature should be skipped for this request. Default to
     *   false.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.batch_process_documents.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_BatchProcessDocuments_async
     */
    batchProcessDocuments(request?: protos.google.cloud.documentai.v1.IBatchProcessRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.documentai.v1.IBatchProcessResponse, protos.google.cloud.documentai.v1.IBatchProcessMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    batchProcessDocuments(request: protos.google.cloud.documentai.v1.IBatchProcessRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.documentai.v1.IBatchProcessResponse, protos.google.cloud.documentai.v1.IBatchProcessMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    batchProcessDocuments(request: protos.google.cloud.documentai.v1.IBatchProcessRequest, callback: Callback<LROperation<protos.google.cloud.documentai.v1.IBatchProcessResponse, protos.google.cloud.documentai.v1.IBatchProcessMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `batchProcessDocuments()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.batch_process_documents.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_BatchProcessDocuments_async
     */
    checkBatchProcessDocumentsProgress(name: string): Promise<LROperation<protos.google.cloud.documentai.v1.BatchProcessResponse, protos.google.cloud.documentai.v1.BatchProcessMetadata>>;
    /**
     * Trains a new processor version.
     * Operation metadata is returned as
     * cloud_documentai_core.TrainProcessorVersionMetadata.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project, location and processor) to create the new
     *   version for. Format:
     *   `projects/{project}/locations/{location}/processors/{processor}`.
     * @param {google.cloud.documentai.v1.ProcessorVersion} request.processorVersion
     *   Required. The processor version to be created.
     * @param {google.cloud.documentai.v1.DocumentSchema} [request.documentSchema]
     *   Optional. The schema the processor version will be trained with.
     * @param {google.cloud.documentai.v1.TrainProcessorVersionRequest.InputData} [request.inputData]
     *   Optional. The input data used to train the `ProcessorVersion`.
     * @param {string} [request.baseProcessorVersion]
     *   Optional. The processor version to use as a base for training. This
     *   processor version must be a child of `parent`. Format:
     *   `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.train_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_TrainProcessorVersion_async
     */
    trainProcessorVersion(request?: protos.google.cloud.documentai.v1.ITrainProcessorVersionRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.documentai.v1.ITrainProcessorVersionResponse, protos.google.cloud.documentai.v1.ITrainProcessorVersionMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    trainProcessorVersion(request: protos.google.cloud.documentai.v1.ITrainProcessorVersionRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.documentai.v1.ITrainProcessorVersionResponse, protos.google.cloud.documentai.v1.ITrainProcessorVersionMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    trainProcessorVersion(request: protos.google.cloud.documentai.v1.ITrainProcessorVersionRequest, callback: Callback<LROperation<protos.google.cloud.documentai.v1.ITrainProcessorVersionResponse, protos.google.cloud.documentai.v1.ITrainProcessorVersionMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `trainProcessorVersion()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.train_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_TrainProcessorVersion_async
     */
    checkTrainProcessorVersionProgress(name: string): Promise<LROperation<protos.google.cloud.documentai.v1.TrainProcessorVersionResponse, protos.google.cloud.documentai.v1.TrainProcessorVersionMetadata>>;
    /**
     * Deletes the processor version, all artifacts under the processor version
     * will be deleted.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The processor version resource name to be deleted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.delete_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_DeleteProcessorVersion_async
     */
    deleteProcessorVersion(request?: protos.google.cloud.documentai.v1.IDeleteProcessorVersionRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.documentai.v1.IDeleteProcessorVersionMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteProcessorVersion(request: protos.google.cloud.documentai.v1.IDeleteProcessorVersionRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.documentai.v1.IDeleteProcessorVersionMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteProcessorVersion(request: protos.google.cloud.documentai.v1.IDeleteProcessorVersionRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.documentai.v1.IDeleteProcessorVersionMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteProcessorVersion()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.delete_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_DeleteProcessorVersion_async
     */
    checkDeleteProcessorVersionProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.documentai.v1.DeleteProcessorVersionMetadata>>;
    /**
     * Deploys the processor version.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The processor version resource name to be deployed.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.deploy_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_DeployProcessorVersion_async
     */
    deployProcessorVersion(request?: protos.google.cloud.documentai.v1.IDeployProcessorVersionRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.documentai.v1.IDeployProcessorVersionResponse, protos.google.cloud.documentai.v1.IDeployProcessorVersionMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deployProcessorVersion(request: protos.google.cloud.documentai.v1.IDeployProcessorVersionRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.documentai.v1.IDeployProcessorVersionResponse, protos.google.cloud.documentai.v1.IDeployProcessorVersionMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deployProcessorVersion(request: protos.google.cloud.documentai.v1.IDeployProcessorVersionRequest, callback: Callback<LROperation<protos.google.cloud.documentai.v1.IDeployProcessorVersionResponse, protos.google.cloud.documentai.v1.IDeployProcessorVersionMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deployProcessorVersion()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.deploy_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_DeployProcessorVersion_async
     */
    checkDeployProcessorVersionProgress(name: string): Promise<LROperation<protos.google.cloud.documentai.v1.DeployProcessorVersionResponse, protos.google.cloud.documentai.v1.DeployProcessorVersionMetadata>>;
    /**
     * Undeploys the processor version.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The processor version resource name to be undeployed.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.undeploy_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_UndeployProcessorVersion_async
     */
    undeployProcessorVersion(request?: protos.google.cloud.documentai.v1.IUndeployProcessorVersionRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.documentai.v1.IUndeployProcessorVersionResponse, protos.google.cloud.documentai.v1.IUndeployProcessorVersionMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    undeployProcessorVersion(request: protos.google.cloud.documentai.v1.IUndeployProcessorVersionRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.documentai.v1.IUndeployProcessorVersionResponse, protos.google.cloud.documentai.v1.IUndeployProcessorVersionMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    undeployProcessorVersion(request: protos.google.cloud.documentai.v1.IUndeployProcessorVersionRequest, callback: Callback<LROperation<protos.google.cloud.documentai.v1.IUndeployProcessorVersionResponse, protos.google.cloud.documentai.v1.IUndeployProcessorVersionMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `undeployProcessorVersion()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.undeploy_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_UndeployProcessorVersion_async
     */
    checkUndeployProcessorVersionProgress(name: string): Promise<LROperation<protos.google.cloud.documentai.v1.UndeployProcessorVersionResponse, protos.google.cloud.documentai.v1.UndeployProcessorVersionMetadata>>;
    /**
     * Deletes the processor, unloads all deployed model artifacts if it was
     * enabled and then deletes all artifacts associated with this processor.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The processor resource name to be deleted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.delete_processor.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_DeleteProcessor_async
     */
    deleteProcessor(request?: protos.google.cloud.documentai.v1.IDeleteProcessorRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.documentai.v1.IDeleteProcessorMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteProcessor(request: protos.google.cloud.documentai.v1.IDeleteProcessorRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.documentai.v1.IDeleteProcessorMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteProcessor(request: protos.google.cloud.documentai.v1.IDeleteProcessorRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.documentai.v1.IDeleteProcessorMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteProcessor()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.delete_processor.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_DeleteProcessor_async
     */
    checkDeleteProcessorProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.documentai.v1.DeleteProcessorMetadata>>;
    /**
     * Enables a processor
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The processor resource name to be enabled.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.enable_processor.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_EnableProcessor_async
     */
    enableProcessor(request?: protos.google.cloud.documentai.v1.IEnableProcessorRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.documentai.v1.IEnableProcessorResponse, protos.google.cloud.documentai.v1.IEnableProcessorMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    enableProcessor(request: protos.google.cloud.documentai.v1.IEnableProcessorRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.documentai.v1.IEnableProcessorResponse, protos.google.cloud.documentai.v1.IEnableProcessorMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    enableProcessor(request: protos.google.cloud.documentai.v1.IEnableProcessorRequest, callback: Callback<LROperation<protos.google.cloud.documentai.v1.IEnableProcessorResponse, protos.google.cloud.documentai.v1.IEnableProcessorMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `enableProcessor()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.enable_processor.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_EnableProcessor_async
     */
    checkEnableProcessorProgress(name: string): Promise<LROperation<protos.google.cloud.documentai.v1.EnableProcessorResponse, protos.google.cloud.documentai.v1.EnableProcessorMetadata>>;
    /**
     * Disables a processor
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The processor resource name to be disabled.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.disable_processor.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_DisableProcessor_async
     */
    disableProcessor(request?: protos.google.cloud.documentai.v1.IDisableProcessorRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.documentai.v1.IDisableProcessorResponse, protos.google.cloud.documentai.v1.IDisableProcessorMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    disableProcessor(request: protos.google.cloud.documentai.v1.IDisableProcessorRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.documentai.v1.IDisableProcessorResponse, protos.google.cloud.documentai.v1.IDisableProcessorMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    disableProcessor(request: protos.google.cloud.documentai.v1.IDisableProcessorRequest, callback: Callback<LROperation<protos.google.cloud.documentai.v1.IDisableProcessorResponse, protos.google.cloud.documentai.v1.IDisableProcessorMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `disableProcessor()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.disable_processor.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_DisableProcessor_async
     */
    checkDisableProcessorProgress(name: string): Promise<LROperation<protos.google.cloud.documentai.v1.DisableProcessorResponse, protos.google.cloud.documentai.v1.DisableProcessorMetadata>>;
    /**
     * Set the default (active) version of a
     * {@link google.cloud.documentai.v1.Processor|Processor} that will be used in
     * {@link google.cloud.documentai.v1.DocumentProcessorService.ProcessDocument|ProcessDocument}
     * and
     * {@link google.cloud.documentai.v1.DocumentProcessorService.BatchProcessDocuments|BatchProcessDocuments}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.processor
     *   Required. The resource name of the
     *   {@link google.cloud.documentai.v1.Processor|Processor} to change default
     *   version.
     * @param {string} request.defaultProcessorVersion
     *   Required. The resource name of child
     *   {@link google.cloud.documentai.v1.ProcessorVersion|ProcessorVersion} to use as
     *   default. Format:
     *   `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{version}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.set_default_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_SetDefaultProcessorVersion_async
     */
    setDefaultProcessorVersion(request?: protos.google.cloud.documentai.v1.ISetDefaultProcessorVersionRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.documentai.v1.ISetDefaultProcessorVersionResponse, protos.google.cloud.documentai.v1.ISetDefaultProcessorVersionMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    setDefaultProcessorVersion(request: protos.google.cloud.documentai.v1.ISetDefaultProcessorVersionRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.documentai.v1.ISetDefaultProcessorVersionResponse, protos.google.cloud.documentai.v1.ISetDefaultProcessorVersionMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    setDefaultProcessorVersion(request: protos.google.cloud.documentai.v1.ISetDefaultProcessorVersionRequest, callback: Callback<LROperation<protos.google.cloud.documentai.v1.ISetDefaultProcessorVersionResponse, protos.google.cloud.documentai.v1.ISetDefaultProcessorVersionMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `setDefaultProcessorVersion()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.set_default_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_SetDefaultProcessorVersion_async
     */
    checkSetDefaultProcessorVersionProgress(name: string): Promise<LROperation<protos.google.cloud.documentai.v1.SetDefaultProcessorVersionResponse, protos.google.cloud.documentai.v1.SetDefaultProcessorVersionMetadata>>;
    /**
     * Send a document for Human Review. The input document should be processed by
     * the specified processor.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.documentai.v1.Document} request.inlineDocument
     *   An inline document proto.
     * @param {string} request.humanReviewConfig
     *   Required. The resource name of the HumanReviewConfig that the document will
     *   be reviewed with.
     * @param {boolean} request.enableSchemaValidation
     *   Whether the validation should be performed on the ad-hoc review request.
     * @param {google.cloud.documentai.v1.ReviewDocumentRequest.Priority} request.priority
     *   The priority of the human review task.
     * @param {google.cloud.documentai.v1.DocumentSchema} request.documentSchema
     *   The document schema of the human review task.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.review_document.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_ReviewDocument_async
     */
    reviewDocument(request?: protos.google.cloud.documentai.v1.IReviewDocumentRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.documentai.v1.IReviewDocumentResponse, protos.google.cloud.documentai.v1.IReviewDocumentOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    reviewDocument(request: protos.google.cloud.documentai.v1.IReviewDocumentRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.documentai.v1.IReviewDocumentResponse, protos.google.cloud.documentai.v1.IReviewDocumentOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    reviewDocument(request: protos.google.cloud.documentai.v1.IReviewDocumentRequest, callback: Callback<LROperation<protos.google.cloud.documentai.v1.IReviewDocumentResponse, protos.google.cloud.documentai.v1.IReviewDocumentOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `reviewDocument()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.review_document.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_ReviewDocument_async
     */
    checkReviewDocumentProgress(name: string): Promise<LROperation<protos.google.cloud.documentai.v1.ReviewDocumentResponse, protos.google.cloud.documentai.v1.ReviewDocumentOperationMetadata>>;
    /**
     * Evaluates a ProcessorVersion against annotated documents, producing an
     * Evaluation.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.processorVersion
     *   Required. The resource name of the
     *   {@link google.cloud.documentai.v1.ProcessorVersion|ProcessorVersion} to
     *   evaluate.
     *   `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`
     * @param {google.cloud.documentai.v1.BatchDocumentsInputConfig} [request.evaluationDocuments]
     *   Optional. The documents used in the evaluation. If unspecified, use the
     *   processor's dataset as evaluation input.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.evaluate_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_EvaluateProcessorVersion_async
     */
    evaluateProcessorVersion(request?: protos.google.cloud.documentai.v1.IEvaluateProcessorVersionRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.documentai.v1.IEvaluateProcessorVersionResponse, protos.google.cloud.documentai.v1.IEvaluateProcessorVersionMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    evaluateProcessorVersion(request: protos.google.cloud.documentai.v1.IEvaluateProcessorVersionRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.documentai.v1.IEvaluateProcessorVersionResponse, protos.google.cloud.documentai.v1.IEvaluateProcessorVersionMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    evaluateProcessorVersion(request: protos.google.cloud.documentai.v1.IEvaluateProcessorVersionRequest, callback: Callback<LROperation<protos.google.cloud.documentai.v1.IEvaluateProcessorVersionResponse, protos.google.cloud.documentai.v1.IEvaluateProcessorVersionMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `evaluateProcessorVersion()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.evaluate_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_EvaluateProcessorVersion_async
     */
    checkEvaluateProcessorVersionProgress(name: string): Promise<LROperation<protos.google.cloud.documentai.v1.EvaluateProcessorVersionResponse, protos.google.cloud.documentai.v1.EvaluateProcessorVersionMetadata>>;
    /**
     * Lists the processor types that exist.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The location of processor type to list.
     *   The available processor types may depend on the allow-listing on projects.
     *   Format: `projects/{project}/locations/{location}`
     * @param {number} request.pageSize
     *   The maximum number of processor types to return.
     *   If unspecified, at most 100 processor types will be returned.
     *   The maximum value is 500; values above 500 will be coerced to 500.
     * @param {string} request.pageToken
     *   Used to retrieve the next page of results, empty if at the end of the list.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link google.cloud.documentai.v1.ProcessorType | ProcessorType}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listProcessorTypesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listProcessorTypes(request?: protos.google.cloud.documentai.v1.IListProcessorTypesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.documentai.v1.IProcessorType[],
        protos.google.cloud.documentai.v1.IListProcessorTypesRequest | null,
        protos.google.cloud.documentai.v1.IListProcessorTypesResponse
    ]>;
    listProcessorTypes(request: protos.google.cloud.documentai.v1.IListProcessorTypesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.documentai.v1.IListProcessorTypesRequest, protos.google.cloud.documentai.v1.IListProcessorTypesResponse | null | undefined, protos.google.cloud.documentai.v1.IProcessorType>): void;
    listProcessorTypes(request: protos.google.cloud.documentai.v1.IListProcessorTypesRequest, callback: PaginationCallback<protos.google.cloud.documentai.v1.IListProcessorTypesRequest, protos.google.cloud.documentai.v1.IListProcessorTypesResponse | null | undefined, protos.google.cloud.documentai.v1.IProcessorType>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The location of processor type to list.
     *   The available processor types may depend on the allow-listing on projects.
     *   Format: `projects/{project}/locations/{location}`
     * @param {number} request.pageSize
     *   The maximum number of processor types to return.
     *   If unspecified, at most 100 processor types will be returned.
     *   The maximum value is 500; values above 500 will be coerced to 500.
     * @param {string} request.pageToken
     *   Used to retrieve the next page of results, empty if at the end of the list.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link google.cloud.documentai.v1.ProcessorType | ProcessorType} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listProcessorTypesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listProcessorTypesStream(request?: protos.google.cloud.documentai.v1.IListProcessorTypesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listProcessorTypes`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The location of processor type to list.
     *   The available processor types may depend on the allow-listing on projects.
     *   Format: `projects/{project}/locations/{location}`
     * @param {number} request.pageSize
     *   The maximum number of processor types to return.
     *   If unspecified, at most 100 processor types will be returned.
     *   The maximum value is 500; values above 500 will be coerced to 500.
     * @param {string} request.pageToken
     *   Used to retrieve the next page of results, empty if at the end of the list.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.documentai.v1.ProcessorType | ProcessorType}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.list_processor_types.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_ListProcessorTypes_async
     */
    listProcessorTypesAsync(request?: protos.google.cloud.documentai.v1.IListProcessorTypesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.documentai.v1.IProcessorType>;
    /**
     * Lists all processors which belong to this project.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project and location) which owns this collection of
     *   Processors. Format: `projects/{project}/locations/{location}`
     * @param {number} request.pageSize
     *   The maximum number of processors to return.
     *   If unspecified, at most 50 processors will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   We will return the processors sorted by creation time. The page token
     *   will point to the next processor.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link google.cloud.documentai.v1.Processor | Processor}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listProcessorsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listProcessors(request?: protos.google.cloud.documentai.v1.IListProcessorsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.documentai.v1.IProcessor[],
        protos.google.cloud.documentai.v1.IListProcessorsRequest | null,
        protos.google.cloud.documentai.v1.IListProcessorsResponse
    ]>;
    listProcessors(request: protos.google.cloud.documentai.v1.IListProcessorsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.documentai.v1.IListProcessorsRequest, protos.google.cloud.documentai.v1.IListProcessorsResponse | null | undefined, protos.google.cloud.documentai.v1.IProcessor>): void;
    listProcessors(request: protos.google.cloud.documentai.v1.IListProcessorsRequest, callback: PaginationCallback<protos.google.cloud.documentai.v1.IListProcessorsRequest, protos.google.cloud.documentai.v1.IListProcessorsResponse | null | undefined, protos.google.cloud.documentai.v1.IProcessor>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project and location) which owns this collection of
     *   Processors. Format: `projects/{project}/locations/{location}`
     * @param {number} request.pageSize
     *   The maximum number of processors to return.
     *   If unspecified, at most 50 processors will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   We will return the processors sorted by creation time. The page token
     *   will point to the next processor.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link google.cloud.documentai.v1.Processor | Processor} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listProcessorsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listProcessorsStream(request?: protos.google.cloud.documentai.v1.IListProcessorsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listProcessors`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project and location) which owns this collection of
     *   Processors. Format: `projects/{project}/locations/{location}`
     * @param {number} request.pageSize
     *   The maximum number of processors to return.
     *   If unspecified, at most 50 processors will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   We will return the processors sorted by creation time. The page token
     *   will point to the next processor.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.documentai.v1.Processor | Processor}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.list_processors.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_ListProcessors_async
     */
    listProcessorsAsync(request?: protos.google.cloud.documentai.v1.IListProcessorsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.documentai.v1.IProcessor>;
    /**
     * Lists all versions of a processor.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project, location and processor) to list all
     *   versions. Format:
     *   `projects/{project}/locations/{location}/processors/{processor}`
     * @param {number} request.pageSize
     *   The maximum number of processor versions to return.
     *   If unspecified, at most 10 processor versions will be returned.
     *   The maximum value is 20; values above 20 will be coerced to 20.
     * @param {string} request.pageToken
     *   We will return the processor versions sorted by creation time. The page
     *   token will point to the next processor version.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link google.cloud.documentai.v1.ProcessorVersion | ProcessorVersion}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listProcessorVersionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listProcessorVersions(request?: protos.google.cloud.documentai.v1.IListProcessorVersionsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.documentai.v1.IProcessorVersion[],
        protos.google.cloud.documentai.v1.IListProcessorVersionsRequest | null,
        protos.google.cloud.documentai.v1.IListProcessorVersionsResponse
    ]>;
    listProcessorVersions(request: protos.google.cloud.documentai.v1.IListProcessorVersionsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.documentai.v1.IListProcessorVersionsRequest, protos.google.cloud.documentai.v1.IListProcessorVersionsResponse | null | undefined, protos.google.cloud.documentai.v1.IProcessorVersion>): void;
    listProcessorVersions(request: protos.google.cloud.documentai.v1.IListProcessorVersionsRequest, callback: PaginationCallback<protos.google.cloud.documentai.v1.IListProcessorVersionsRequest, protos.google.cloud.documentai.v1.IListProcessorVersionsResponse | null | undefined, protos.google.cloud.documentai.v1.IProcessorVersion>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project, location and processor) to list all
     *   versions. Format:
     *   `projects/{project}/locations/{location}/processors/{processor}`
     * @param {number} request.pageSize
     *   The maximum number of processor versions to return.
     *   If unspecified, at most 10 processor versions will be returned.
     *   The maximum value is 20; values above 20 will be coerced to 20.
     * @param {string} request.pageToken
     *   We will return the processor versions sorted by creation time. The page
     *   token will point to the next processor version.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link google.cloud.documentai.v1.ProcessorVersion | ProcessorVersion} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listProcessorVersionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listProcessorVersionsStream(request?: protos.google.cloud.documentai.v1.IListProcessorVersionsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listProcessorVersions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project, location and processor) to list all
     *   versions. Format:
     *   `projects/{project}/locations/{location}/processors/{processor}`
     * @param {number} request.pageSize
     *   The maximum number of processor versions to return.
     *   If unspecified, at most 10 processor versions will be returned.
     *   The maximum value is 20; values above 20 will be coerced to 20.
     * @param {string} request.pageToken
     *   We will return the processor versions sorted by creation time. The page
     *   token will point to the next processor version.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.documentai.v1.ProcessorVersion | ProcessorVersion}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.list_processor_versions.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_ListProcessorVersions_async
     */
    listProcessorVersionsAsync(request?: protos.google.cloud.documentai.v1.IListProcessorVersionsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.documentai.v1.IProcessorVersion>;
    /**
     * Retrieves a set of evaluations for a given processor version.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the
     *   {@link google.cloud.documentai.v1.ProcessorVersion|ProcessorVersion} to list
     *   evaluations for.
     *   `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`
     * @param {number} request.pageSize
     *   The standard list page size.
     *   If unspecified, at most 5 evaluations will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListEvaluations` call.
     *   Provide this to retrieve the subsequent page.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link google.cloud.documentai.v1.Evaluation | Evaluation}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listEvaluationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listEvaluations(request?: protos.google.cloud.documentai.v1.IListEvaluationsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.documentai.v1.IEvaluation[],
        protos.google.cloud.documentai.v1.IListEvaluationsRequest | null,
        protos.google.cloud.documentai.v1.IListEvaluationsResponse
    ]>;
    listEvaluations(request: protos.google.cloud.documentai.v1.IListEvaluationsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.documentai.v1.IListEvaluationsRequest, protos.google.cloud.documentai.v1.IListEvaluationsResponse | null | undefined, protos.google.cloud.documentai.v1.IEvaluation>): void;
    listEvaluations(request: protos.google.cloud.documentai.v1.IListEvaluationsRequest, callback: PaginationCallback<protos.google.cloud.documentai.v1.IListEvaluationsRequest, protos.google.cloud.documentai.v1.IListEvaluationsResponse | null | undefined, protos.google.cloud.documentai.v1.IEvaluation>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the
     *   {@link google.cloud.documentai.v1.ProcessorVersion|ProcessorVersion} to list
     *   evaluations for.
     *   `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`
     * @param {number} request.pageSize
     *   The standard list page size.
     *   If unspecified, at most 5 evaluations will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListEvaluations` call.
     *   Provide this to retrieve the subsequent page.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link google.cloud.documentai.v1.Evaluation | Evaluation} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listEvaluationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listEvaluationsStream(request?: protos.google.cloud.documentai.v1.IListEvaluationsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listEvaluations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the
     *   {@link google.cloud.documentai.v1.ProcessorVersion|ProcessorVersion} to list
     *   evaluations for.
     *   `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`
     * @param {number} request.pageSize
     *   The standard list page size.
     *   If unspecified, at most 5 evaluations will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListEvaluations` call.
     *   Provide this to retrieve the subsequent page.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.documentai.v1.Evaluation | Evaluation}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.list_evaluations.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_ListEvaluations_async
     */
    listEvaluationsAsync(request?: protos.google.cloud.documentai.v1.IListEvaluationsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.documentai.v1.IEvaluation>;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request: protos.google.longrunning.GetOperationRequest, options?: gax.CallOptions | Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>): Promise<[protos.google.longrunning.Operation]>;
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request: protos.google.longrunning.ListOperationsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.longrunning.ListOperationsResponse>;
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request: protos.google.longrunning.CancelOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.CancelOperationRequest, {} | undefined | null>, callback?: Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>): Promise<protos.google.protobuf.Empty>;
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request: protos.google.longrunning.DeleteOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>): Promise<protos.google.protobuf.Empty>;
    /**
     * Return a fully-qualified evaluation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} processor
     * @param {string} processor_version
     * @param {string} evaluation
     * @returns {string} Resource name string.
     */
    evaluationPath(project: string, location: string, processor: string, processorVersion: string, evaluation: string): string;
    /**
     * Parse the project from Evaluation resource.
     *
     * @param {string} evaluationName
     *   A fully-qualified path representing Evaluation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEvaluationName(evaluationName: string): string | number;
    /**
     * Parse the location from Evaluation resource.
     *
     * @param {string} evaluationName
     *   A fully-qualified path representing Evaluation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEvaluationName(evaluationName: string): string | number;
    /**
     * Parse the processor from Evaluation resource.
     *
     * @param {string} evaluationName
     *   A fully-qualified path representing Evaluation resource.
     * @returns {string} A string representing the processor.
     */
    matchProcessorFromEvaluationName(evaluationName: string): string | number;
    /**
     * Parse the processor_version from Evaluation resource.
     *
     * @param {string} evaluationName
     *   A fully-qualified path representing Evaluation resource.
     * @returns {string} A string representing the processor_version.
     */
    matchProcessorVersionFromEvaluationName(evaluationName: string): string | number;
    /**
     * Parse the evaluation from Evaluation resource.
     *
     * @param {string} evaluationName
     *   A fully-qualified path representing Evaluation resource.
     * @returns {string} A string representing the evaluation.
     */
    matchEvaluationFromEvaluationName(evaluationName: string): string | number;
    /**
     * Return a fully-qualified humanReviewConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} processor
     * @returns {string} Resource name string.
     */
    humanReviewConfigPath(project: string, location: string, processor: string): string;
    /**
     * Parse the project from HumanReviewConfig resource.
     *
     * @param {string} humanReviewConfigName
     *   A fully-qualified path representing HumanReviewConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromHumanReviewConfigName(humanReviewConfigName: string): string | number;
    /**
     * Parse the location from HumanReviewConfig resource.
     *
     * @param {string} humanReviewConfigName
     *   A fully-qualified path representing HumanReviewConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromHumanReviewConfigName(humanReviewConfigName: string): string | number;
    /**
     * Parse the processor from HumanReviewConfig resource.
     *
     * @param {string} humanReviewConfigName
     *   A fully-qualified path representing HumanReviewConfig resource.
     * @returns {string} A string representing the processor.
     */
    matchProcessorFromHumanReviewConfigName(humanReviewConfigName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified processor resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} processor
     * @returns {string} Resource name string.
     */
    processorPath(project: string, location: string, processor: string): string;
    /**
     * Parse the project from Processor resource.
     *
     * @param {string} processorName
     *   A fully-qualified path representing Processor resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProcessorName(processorName: string): string | number;
    /**
     * Parse the location from Processor resource.
     *
     * @param {string} processorName
     *   A fully-qualified path representing Processor resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProcessorName(processorName: string): string | number;
    /**
     * Parse the processor from Processor resource.
     *
     * @param {string} processorName
     *   A fully-qualified path representing Processor resource.
     * @returns {string} A string representing the processor.
     */
    matchProcessorFromProcessorName(processorName: string): string | number;
    /**
     * Return a fully-qualified processorType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} processor_type
     * @returns {string} Resource name string.
     */
    processorTypePath(project: string, location: string, processorType: string): string;
    /**
     * Parse the project from ProcessorType resource.
     *
     * @param {string} processorTypeName
     *   A fully-qualified path representing ProcessorType resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProcessorTypeName(processorTypeName: string): string | number;
    /**
     * Parse the location from ProcessorType resource.
     *
     * @param {string} processorTypeName
     *   A fully-qualified path representing ProcessorType resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProcessorTypeName(processorTypeName: string): string | number;
    /**
     * Parse the processor_type from ProcessorType resource.
     *
     * @param {string} processorTypeName
     *   A fully-qualified path representing ProcessorType resource.
     * @returns {string} A string representing the processor_type.
     */
    matchProcessorTypeFromProcessorTypeName(processorTypeName: string): string | number;
    /**
     * Return a fully-qualified processorVersion resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} processor
     * @param {string} processor_version
     * @returns {string} Resource name string.
     */
    processorVersionPath(project: string, location: string, processor: string, processorVersion: string): string;
    /**
     * Parse the project from ProcessorVersion resource.
     *
     * @param {string} processorVersionName
     *   A fully-qualified path representing ProcessorVersion resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProcessorVersionName(processorVersionName: string): string | number;
    /**
     * Parse the location from ProcessorVersion resource.
     *
     * @param {string} processorVersionName
     *   A fully-qualified path representing ProcessorVersion resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProcessorVersionName(processorVersionName: string): string | number;
    /**
     * Parse the processor from ProcessorVersion resource.
     *
     * @param {string} processorVersionName
     *   A fully-qualified path representing ProcessorVersion resource.
     * @returns {string} A string representing the processor.
     */
    matchProcessorFromProcessorVersionName(processorVersionName: string): string | number;
    /**
     * Parse the processor_version from ProcessorVersion resource.
     *
     * @param {string} processorVersionName
     *   A fully-qualified path representing ProcessorVersion resource.
     * @returns {string} A string representing the processor_version.
     */
    matchProcessorVersionFromProcessorVersionName(processorVersionName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
