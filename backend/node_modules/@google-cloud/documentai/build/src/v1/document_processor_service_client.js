"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentProcessorServiceClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/document_processor_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./document_processor_service_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Service to call Cloud DocumentAI to process documents according to the
 *  processor's definition. Processors are built using state-of-the-art Google
 *  AI such as natural language, computer vision, and translation to extract
 *  structured information from unstructured or semi-structured documents.
 * @class
 * @memberof v1
 */
class DocumentProcessorServiceClient {
    /**
     * Construct an instance of DocumentProcessorServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
     *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new DocumentProcessorServiceClient({fallback: 'rest'}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this
            .constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else if (opts.fallback === 'rest') {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            evaluationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processor_version}/evaluations/{evaluation}'),
            humanReviewConfigPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/processors/{processor}/humanReviewConfig'),
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
            processorPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/processors/{processor}'),
            processorTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/processorTypes/{processor_type}'),
            processorVersionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processor_version}'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listProcessorTypes: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'processorTypes'),
            listProcessors: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'processors'),
            listProcessorVersions: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'processorVersions'),
            listEvaluations: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'evaluations'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        };
        if (opts.fallback === 'rest') {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [
                {
                    selector: 'google.cloud.location.Locations.GetLocation',
                    get: '/v1/{name=projects/*/locations/*}',
                    additional_bindings: [
                        { get: '/uiv1beta3/{name=projects/*/locations/*}' },
                    ],
                },
                {
                    selector: 'google.cloud.location.Locations.ListLocations',
                    get: '/v1/{name=projects/*}/locations',
                    additional_bindings: [
                        { get: '/uiv1beta3/{name=projects/*}/locations' },
                    ],
                },
                {
                    selector: 'google.longrunning.Operations.CancelOperation',
                    post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
                    additional_bindings: [
                        {
                            post: '/uiv1beta3/{name=projects/*/locations/*/operations/*}:cancel',
                        },
                    ],
                },
                {
                    selector: 'google.longrunning.Operations.GetOperation',
                    get: '/v1/{name=projects/*/operations/*}',
                    additional_bindings: [
                        { get: '/v1/{name=projects/*/locations/*/operations/*}' },
                        { get: '/uiv1beta3/{name=projects/*/locations/*/operations/*}' },
                    ],
                },
                {
                    selector: 'google.longrunning.Operations.ListOperations',
                    get: '/v1/{name=projects/*/locations/*/operations}',
                    additional_bindings: [
                        { get: '/uiv1beta3/{name=projects/*/locations/*/operations}' },
                    ],
                },
            ];
        }
        this.operationsClient = this._gaxModule
            .lro(lroOptions)
            .operationsClient(opts);
        const batchProcessDocumentsResponse = protoFilesRoot.lookup('.google.cloud.documentai.v1.BatchProcessResponse');
        const batchProcessDocumentsMetadata = protoFilesRoot.lookup('.google.cloud.documentai.v1.BatchProcessMetadata');
        const trainProcessorVersionResponse = protoFilesRoot.lookup('.google.cloud.documentai.v1.TrainProcessorVersionResponse');
        const trainProcessorVersionMetadata = protoFilesRoot.lookup('.google.cloud.documentai.v1.TrainProcessorVersionMetadata');
        const deleteProcessorVersionResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteProcessorVersionMetadata = protoFilesRoot.lookup('.google.cloud.documentai.v1.DeleteProcessorVersionMetadata');
        const deployProcessorVersionResponse = protoFilesRoot.lookup('.google.cloud.documentai.v1.DeployProcessorVersionResponse');
        const deployProcessorVersionMetadata = protoFilesRoot.lookup('.google.cloud.documentai.v1.DeployProcessorVersionMetadata');
        const undeployProcessorVersionResponse = protoFilesRoot.lookup('.google.cloud.documentai.v1.UndeployProcessorVersionResponse');
        const undeployProcessorVersionMetadata = protoFilesRoot.lookup('.google.cloud.documentai.v1.UndeployProcessorVersionMetadata');
        const deleteProcessorResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteProcessorMetadata = protoFilesRoot.lookup('.google.cloud.documentai.v1.DeleteProcessorMetadata');
        const enableProcessorResponse = protoFilesRoot.lookup('.google.cloud.documentai.v1.EnableProcessorResponse');
        const enableProcessorMetadata = protoFilesRoot.lookup('.google.cloud.documentai.v1.EnableProcessorMetadata');
        const disableProcessorResponse = protoFilesRoot.lookup('.google.cloud.documentai.v1.DisableProcessorResponse');
        const disableProcessorMetadata = protoFilesRoot.lookup('.google.cloud.documentai.v1.DisableProcessorMetadata');
        const setDefaultProcessorVersionResponse = protoFilesRoot.lookup('.google.cloud.documentai.v1.SetDefaultProcessorVersionResponse');
        const setDefaultProcessorVersionMetadata = protoFilesRoot.lookup('.google.cloud.documentai.v1.SetDefaultProcessorVersionMetadata');
        const reviewDocumentResponse = protoFilesRoot.lookup('.google.cloud.documentai.v1.ReviewDocumentResponse');
        const reviewDocumentMetadata = protoFilesRoot.lookup('.google.cloud.documentai.v1.ReviewDocumentOperationMetadata');
        const evaluateProcessorVersionResponse = protoFilesRoot.lookup('.google.cloud.documentai.v1.EvaluateProcessorVersionResponse');
        const evaluateProcessorVersionMetadata = protoFilesRoot.lookup('.google.cloud.documentai.v1.EvaluateProcessorVersionMetadata');
        this.descriptors.longrunning = {
            batchProcessDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, batchProcessDocumentsResponse.decode.bind(batchProcessDocumentsResponse), batchProcessDocumentsMetadata.decode.bind(batchProcessDocumentsMetadata)),
            trainProcessorVersion: new this._gaxModule.LongrunningDescriptor(this.operationsClient, trainProcessorVersionResponse.decode.bind(trainProcessorVersionResponse), trainProcessorVersionMetadata.decode.bind(trainProcessorVersionMetadata)),
            deleteProcessorVersion: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteProcessorVersionResponse.decode.bind(deleteProcessorVersionResponse), deleteProcessorVersionMetadata.decode.bind(deleteProcessorVersionMetadata)),
            deployProcessorVersion: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deployProcessorVersionResponse.decode.bind(deployProcessorVersionResponse), deployProcessorVersionMetadata.decode.bind(deployProcessorVersionMetadata)),
            undeployProcessorVersion: new this._gaxModule.LongrunningDescriptor(this.operationsClient, undeployProcessorVersionResponse.decode.bind(undeployProcessorVersionResponse), undeployProcessorVersionMetadata.decode.bind(undeployProcessorVersionMetadata)),
            deleteProcessor: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteProcessorResponse.decode.bind(deleteProcessorResponse), deleteProcessorMetadata.decode.bind(deleteProcessorMetadata)),
            enableProcessor: new this._gaxModule.LongrunningDescriptor(this.operationsClient, enableProcessorResponse.decode.bind(enableProcessorResponse), enableProcessorMetadata.decode.bind(enableProcessorMetadata)),
            disableProcessor: new this._gaxModule.LongrunningDescriptor(this.operationsClient, disableProcessorResponse.decode.bind(disableProcessorResponse), disableProcessorMetadata.decode.bind(disableProcessorMetadata)),
            setDefaultProcessorVersion: new this._gaxModule.LongrunningDescriptor(this.operationsClient, setDefaultProcessorVersionResponse.decode.bind(setDefaultProcessorVersionResponse), setDefaultProcessorVersionMetadata.decode.bind(setDefaultProcessorVersionMetadata)),
            reviewDocument: new this._gaxModule.LongrunningDescriptor(this.operationsClient, reviewDocumentResponse.decode.bind(reviewDocumentResponse), reviewDocumentMetadata.decode.bind(reviewDocumentMetadata)),
            evaluateProcessorVersion: new this._gaxModule.LongrunningDescriptor(this.operationsClient, evaluateProcessorVersionResponse.decode.bind(evaluateProcessorVersionResponse), evaluateProcessorVersionMetadata.decode.bind(evaluateProcessorVersionMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.documentai.v1.DocumentProcessorService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.documentProcessorServiceStub) {
            return this.documentProcessorServiceStub;
        }
        // Put together the "service stub" for
        // google.cloud.documentai.v1.DocumentProcessorService.
        this.documentProcessorServiceStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.documentai.v1.DocumentProcessorService')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.documentai.v1
                    .DocumentProcessorService, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const documentProcessorServiceStubMethods = [
            'processDocument',
            'batchProcessDocuments',
            'fetchProcessorTypes',
            'listProcessorTypes',
            'getProcessorType',
            'listProcessors',
            'getProcessor',
            'trainProcessorVersion',
            'getProcessorVersion',
            'listProcessorVersions',
            'deleteProcessorVersion',
            'deployProcessorVersion',
            'undeployProcessorVersion',
            'createProcessor',
            'deleteProcessor',
            'enableProcessor',
            'disableProcessor',
            'setDefaultProcessorVersion',
            'reviewDocument',
            'evaluateProcessorVersion',
            'getEvaluation',
            'listEvaluations',
        ];
        for (const methodName of documentProcessorServiceStubMethods) {
            const callPromise = this.documentProcessorServiceStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.documentProcessorServiceStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'documentai.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'documentai.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    processDocument(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.processDocument(request, options, callback);
    }
    fetchProcessorTypes(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.fetchProcessorTypes(request, options, callback);
    }
    getProcessorType(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getProcessorType(request, options, callback);
    }
    getProcessor(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getProcessor(request, options, callback);
    }
    getProcessorVersion(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getProcessorVersion(request, options, callback);
    }
    createProcessor(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createProcessor(request, options, callback);
    }
    getEvaluation(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getEvaluation(request, options, callback);
    }
    batchProcessDocuments(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.batchProcessDocuments(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `batchProcessDocuments()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.batch_process_documents.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_BatchProcessDocuments_async
     */
    async checkBatchProcessDocumentsProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.batchProcessDocuments, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    trainProcessorVersion(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.trainProcessorVersion(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `trainProcessorVersion()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.train_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_TrainProcessorVersion_async
     */
    async checkTrainProcessorVersionProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.trainProcessorVersion, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteProcessorVersion(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteProcessorVersion(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteProcessorVersion()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.delete_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_DeleteProcessorVersion_async
     */
    async checkDeleteProcessorVersionProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteProcessorVersion, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deployProcessorVersion(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deployProcessorVersion(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deployProcessorVersion()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.deploy_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_DeployProcessorVersion_async
     */
    async checkDeployProcessorVersionProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deployProcessorVersion, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    undeployProcessorVersion(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.undeployProcessorVersion(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `undeployProcessorVersion()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.undeploy_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_UndeployProcessorVersion_async
     */
    async checkUndeployProcessorVersionProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.undeployProcessorVersion, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteProcessor(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteProcessor(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteProcessor()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.delete_processor.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_DeleteProcessor_async
     */
    async checkDeleteProcessorProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteProcessor, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    enableProcessor(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.enableProcessor(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `enableProcessor()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.enable_processor.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_EnableProcessor_async
     */
    async checkEnableProcessorProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.enableProcessor, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    disableProcessor(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.disableProcessor(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `disableProcessor()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.disable_processor.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_DisableProcessor_async
     */
    async checkDisableProcessorProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.disableProcessor, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    setDefaultProcessorVersion(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                processor: (_a = request.processor) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.setDefaultProcessorVersion(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `setDefaultProcessorVersion()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.set_default_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_SetDefaultProcessorVersion_async
     */
    async checkSetDefaultProcessorVersionProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.setDefaultProcessorVersion, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    reviewDocument(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                human_review_config: (_a = request.humanReviewConfig) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.reviewDocument(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `reviewDocument()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.review_document.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_ReviewDocument_async
     */
    async checkReviewDocumentProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.reviewDocument, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    evaluateProcessorVersion(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                processor_version: (_a = request.processorVersion) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.evaluateProcessorVersion(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `evaluateProcessorVersion()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.evaluate_processor_version.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_EvaluateProcessorVersion_async
     */
    async checkEvaluateProcessorVersionProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.evaluateProcessorVersion, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listProcessorTypes(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listProcessorTypes(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The location of processor type to list.
     *   The available processor types may depend on the allow-listing on projects.
     *   Format: `projects/{project}/locations/{location}`
     * @param {number} request.pageSize
     *   The maximum number of processor types to return.
     *   If unspecified, at most 100 processor types will be returned.
     *   The maximum value is 500; values above 500 will be coerced to 500.
     * @param {string} request.pageToken
     *   Used to retrieve the next page of results, empty if at the end of the list.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link google.cloud.documentai.v1.ProcessorType | ProcessorType} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listProcessorTypesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listProcessorTypesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listProcessorTypes'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listProcessorTypes.createStream(this.innerApiCalls.listProcessorTypes, request, callSettings);
    }
    /**
     * Equivalent to `listProcessorTypes`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The location of processor type to list.
     *   The available processor types may depend on the allow-listing on projects.
     *   Format: `projects/{project}/locations/{location}`
     * @param {number} request.pageSize
     *   The maximum number of processor types to return.
     *   If unspecified, at most 100 processor types will be returned.
     *   The maximum value is 500; values above 500 will be coerced to 500.
     * @param {string} request.pageToken
     *   Used to retrieve the next page of results, empty if at the end of the list.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.documentai.v1.ProcessorType | ProcessorType}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.list_processor_types.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_ListProcessorTypes_async
     */
    listProcessorTypesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listProcessorTypes'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listProcessorTypes.asyncIterate(this.innerApiCalls['listProcessorTypes'], request, callSettings);
    }
    listProcessors(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listProcessors(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project and location) which owns this collection of
     *   Processors. Format: `projects/{project}/locations/{location}`
     * @param {number} request.pageSize
     *   The maximum number of processors to return.
     *   If unspecified, at most 50 processors will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   We will return the processors sorted by creation time. The page token
     *   will point to the next processor.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link google.cloud.documentai.v1.Processor | Processor} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listProcessorsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listProcessorsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listProcessors'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listProcessors.createStream(this.innerApiCalls.listProcessors, request, callSettings);
    }
    /**
     * Equivalent to `listProcessors`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project and location) which owns this collection of
     *   Processors. Format: `projects/{project}/locations/{location}`
     * @param {number} request.pageSize
     *   The maximum number of processors to return.
     *   If unspecified, at most 50 processors will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   We will return the processors sorted by creation time. The page token
     *   will point to the next processor.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.documentai.v1.Processor | Processor}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.list_processors.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_ListProcessors_async
     */
    listProcessorsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listProcessors'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listProcessors.asyncIterate(this.innerApiCalls['listProcessors'], request, callSettings);
    }
    listProcessorVersions(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listProcessorVersions(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project, location and processor) to list all
     *   versions. Format:
     *   `projects/{project}/locations/{location}/processors/{processor}`
     * @param {number} request.pageSize
     *   The maximum number of processor versions to return.
     *   If unspecified, at most 10 processor versions will be returned.
     *   The maximum value is 20; values above 20 will be coerced to 20.
     * @param {string} request.pageToken
     *   We will return the processor versions sorted by creation time. The page
     *   token will point to the next processor version.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link google.cloud.documentai.v1.ProcessorVersion | ProcessorVersion} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listProcessorVersionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listProcessorVersionsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listProcessorVersions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listProcessorVersions.createStream(this.innerApiCalls.listProcessorVersions, request, callSettings);
    }
    /**
     * Equivalent to `listProcessorVersions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project, location and processor) to list all
     *   versions. Format:
     *   `projects/{project}/locations/{location}/processors/{processor}`
     * @param {number} request.pageSize
     *   The maximum number of processor versions to return.
     *   If unspecified, at most 10 processor versions will be returned.
     *   The maximum value is 20; values above 20 will be coerced to 20.
     * @param {string} request.pageToken
     *   We will return the processor versions sorted by creation time. The page
     *   token will point to the next processor version.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.documentai.v1.ProcessorVersion | ProcessorVersion}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.list_processor_versions.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_ListProcessorVersions_async
     */
    listProcessorVersionsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listProcessorVersions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listProcessorVersions.asyncIterate(this.innerApiCalls['listProcessorVersions'], request, callSettings);
    }
    listEvaluations(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listEvaluations(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the
     *   {@link google.cloud.documentai.v1.ProcessorVersion|ProcessorVersion} to list
     *   evaluations for.
     *   `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`
     * @param {number} request.pageSize
     *   The standard list page size.
     *   If unspecified, at most 5 evaluations will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListEvaluations` call.
     *   Provide this to retrieve the subsequent page.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link google.cloud.documentai.v1.Evaluation | Evaluation} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listEvaluationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listEvaluationsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listEvaluations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listEvaluations.createStream(this.innerApiCalls.listEvaluations, request, callSettings);
    }
    /**
     * Equivalent to `listEvaluations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the
     *   {@link google.cloud.documentai.v1.ProcessorVersion|ProcessorVersion} to list
     *   evaluations for.
     *   `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`
     * @param {number} request.pageSize
     *   The standard list page size.
     *   If unspecified, at most 5 evaluations will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListEvaluations` call.
     *   Provide this to retrieve the subsequent page.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.documentai.v1.Evaluation | Evaluation}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/document_processor_service.list_evaluations.js</caption>
     * region_tag:documentai_v1_generated_DocumentProcessorService_ListEvaluations_async
     */
    listEvaluationsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listEvaluations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listEvaluations.asyncIterate(this.innerApiCalls['listEvaluations'], request, callSettings);
    }
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request, options, callback) {
        return this.locationsClient.getLocation(request, options, callback);
    }
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request, options) {
        return this.locationsClient.listLocationsAsync(request, options);
    }
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request, options, callback) {
        return this.operationsClient.getOperation(request, options, callback);
    }
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request, options) {
        return this.operationsClient.listOperationsAsync(request, options);
    }
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request, options, callback) {
        return this.operationsClient.cancelOperation(request, options, callback);
    }
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request, options, callback) {
        return this.operationsClient.deleteOperation(request, options, callback);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified evaluation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} processor
     * @param {string} processor_version
     * @param {string} evaluation
     * @returns {string} Resource name string.
     */
    evaluationPath(project, location, processor, processorVersion, evaluation) {
        return this.pathTemplates.evaluationPathTemplate.render({
            project: project,
            location: location,
            processor: processor,
            processor_version: processorVersion,
            evaluation: evaluation,
        });
    }
    /**
     * Parse the project from Evaluation resource.
     *
     * @param {string} evaluationName
     *   A fully-qualified path representing Evaluation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEvaluationName(evaluationName) {
        return this.pathTemplates.evaluationPathTemplate.match(evaluationName)
            .project;
    }
    /**
     * Parse the location from Evaluation resource.
     *
     * @param {string} evaluationName
     *   A fully-qualified path representing Evaluation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEvaluationName(evaluationName) {
        return this.pathTemplates.evaluationPathTemplate.match(evaluationName)
            .location;
    }
    /**
     * Parse the processor from Evaluation resource.
     *
     * @param {string} evaluationName
     *   A fully-qualified path representing Evaluation resource.
     * @returns {string} A string representing the processor.
     */
    matchProcessorFromEvaluationName(evaluationName) {
        return this.pathTemplates.evaluationPathTemplate.match(evaluationName)
            .processor;
    }
    /**
     * Parse the processor_version from Evaluation resource.
     *
     * @param {string} evaluationName
     *   A fully-qualified path representing Evaluation resource.
     * @returns {string} A string representing the processor_version.
     */
    matchProcessorVersionFromEvaluationName(evaluationName) {
        return this.pathTemplates.evaluationPathTemplate.match(evaluationName)
            .processor_version;
    }
    /**
     * Parse the evaluation from Evaluation resource.
     *
     * @param {string} evaluationName
     *   A fully-qualified path representing Evaluation resource.
     * @returns {string} A string representing the evaluation.
     */
    matchEvaluationFromEvaluationName(evaluationName) {
        return this.pathTemplates.evaluationPathTemplate.match(evaluationName)
            .evaluation;
    }
    /**
     * Return a fully-qualified humanReviewConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} processor
     * @returns {string} Resource name string.
     */
    humanReviewConfigPath(project, location, processor) {
        return this.pathTemplates.humanReviewConfigPathTemplate.render({
            project: project,
            location: location,
            processor: processor,
        });
    }
    /**
     * Parse the project from HumanReviewConfig resource.
     *
     * @param {string} humanReviewConfigName
     *   A fully-qualified path representing HumanReviewConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromHumanReviewConfigName(humanReviewConfigName) {
        return this.pathTemplates.humanReviewConfigPathTemplate.match(humanReviewConfigName).project;
    }
    /**
     * Parse the location from HumanReviewConfig resource.
     *
     * @param {string} humanReviewConfigName
     *   A fully-qualified path representing HumanReviewConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromHumanReviewConfigName(humanReviewConfigName) {
        return this.pathTemplates.humanReviewConfigPathTemplate.match(humanReviewConfigName).location;
    }
    /**
     * Parse the processor from HumanReviewConfig resource.
     *
     * @param {string} humanReviewConfigName
     *   A fully-qualified path representing HumanReviewConfig resource.
     * @returns {string} A string representing the processor.
     */
    matchProcessorFromHumanReviewConfigName(humanReviewConfigName) {
        return this.pathTemplates.humanReviewConfigPathTemplate.match(humanReviewConfigName).processor;
    }
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Return a fully-qualified processor resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} processor
     * @returns {string} Resource name string.
     */
    processorPath(project, location, processor) {
        return this.pathTemplates.processorPathTemplate.render({
            project: project,
            location: location,
            processor: processor,
        });
    }
    /**
     * Parse the project from Processor resource.
     *
     * @param {string} processorName
     *   A fully-qualified path representing Processor resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProcessorName(processorName) {
        return this.pathTemplates.processorPathTemplate.match(processorName)
            .project;
    }
    /**
     * Parse the location from Processor resource.
     *
     * @param {string} processorName
     *   A fully-qualified path representing Processor resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProcessorName(processorName) {
        return this.pathTemplates.processorPathTemplate.match(processorName)
            .location;
    }
    /**
     * Parse the processor from Processor resource.
     *
     * @param {string} processorName
     *   A fully-qualified path representing Processor resource.
     * @returns {string} A string representing the processor.
     */
    matchProcessorFromProcessorName(processorName) {
        return this.pathTemplates.processorPathTemplate.match(processorName)
            .processor;
    }
    /**
     * Return a fully-qualified processorType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} processor_type
     * @returns {string} Resource name string.
     */
    processorTypePath(project, location, processorType) {
        return this.pathTemplates.processorTypePathTemplate.render({
            project: project,
            location: location,
            processor_type: processorType,
        });
    }
    /**
     * Parse the project from ProcessorType resource.
     *
     * @param {string} processorTypeName
     *   A fully-qualified path representing ProcessorType resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProcessorTypeName(processorTypeName) {
        return this.pathTemplates.processorTypePathTemplate.match(processorTypeName)
            .project;
    }
    /**
     * Parse the location from ProcessorType resource.
     *
     * @param {string} processorTypeName
     *   A fully-qualified path representing ProcessorType resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProcessorTypeName(processorTypeName) {
        return this.pathTemplates.processorTypePathTemplate.match(processorTypeName)
            .location;
    }
    /**
     * Parse the processor_type from ProcessorType resource.
     *
     * @param {string} processorTypeName
     *   A fully-qualified path representing ProcessorType resource.
     * @returns {string} A string representing the processor_type.
     */
    matchProcessorTypeFromProcessorTypeName(processorTypeName) {
        return this.pathTemplates.processorTypePathTemplate.match(processorTypeName)
            .processor_type;
    }
    /**
     * Return a fully-qualified processorVersion resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} processor
     * @param {string} processor_version
     * @returns {string} Resource name string.
     */
    processorVersionPath(project, location, processor, processorVersion) {
        return this.pathTemplates.processorVersionPathTemplate.render({
            project: project,
            location: location,
            processor: processor,
            processor_version: processorVersion,
        });
    }
    /**
     * Parse the project from ProcessorVersion resource.
     *
     * @param {string} processorVersionName
     *   A fully-qualified path representing ProcessorVersion resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProcessorVersionName(processorVersionName) {
        return this.pathTemplates.processorVersionPathTemplate.match(processorVersionName).project;
    }
    /**
     * Parse the location from ProcessorVersion resource.
     *
     * @param {string} processorVersionName
     *   A fully-qualified path representing ProcessorVersion resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProcessorVersionName(processorVersionName) {
        return this.pathTemplates.processorVersionPathTemplate.match(processorVersionName).location;
    }
    /**
     * Parse the processor from ProcessorVersion resource.
     *
     * @param {string} processorVersionName
     *   A fully-qualified path representing ProcessorVersion resource.
     * @returns {string} A string representing the processor.
     */
    matchProcessorFromProcessorVersionName(processorVersionName) {
        return this.pathTemplates.processorVersionPathTemplate.match(processorVersionName).processor;
    }
    /**
     * Parse the processor_version from ProcessorVersion resource.
     *
     * @param {string} processorVersionName
     *   A fully-qualified path representing ProcessorVersion resource.
     * @returns {string} A string representing the processor_version.
     */
    matchProcessorVersionFromProcessorVersionName(processorVersionName) {
        return this.pathTemplates.processorVersionPathTemplate.match(processorVersionName).processor_version;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.documentProcessorServiceStub && !this._terminated) {
            return this.documentProcessorServiceStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.locationsClient.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.DocumentProcessorServiceClient = DocumentProcessorServiceClient;
//# sourceMappingURL=document_processor_service_client.js.map