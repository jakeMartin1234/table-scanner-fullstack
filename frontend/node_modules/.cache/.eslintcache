[{"/Users/jakemartin/Documents/table-scanner-fullstack/frontend/src/index.js":"1","/Users/jakemartin/Documents/table-scanner-fullstack/frontend/src/components/App.js":"2","/Users/jakemartin/Documents/table-scanner-fullstack/frontend/src/components/Photo.js":"3","/Users/jakemartin/Documents/table-scanner-fullstack/frontend/src/components/fileUploader.js":"4"},{"size":238,"mtime":1681416517616,"results":"5","hashOfConfig":"6"},{"size":14759,"mtime":1681282257048,"results":"7","hashOfConfig":"6"},{"size":6322,"mtime":1681276266170,"results":"8","hashOfConfig":"6"},{"size":671,"mtime":1681275989020,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"cd19f2",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jakemartin/Documents/table-scanner-fullstack/frontend/src/index.js",["23","24"],[],"/Users/jakemartin/Documents/table-scanner-fullstack/frontend/src/components/App.js",["25","26"],[],"import React from 'react';\nimport './App.css';\nimport '../index.css';\nimport ReactCursorPosition from 'react-cursor-position';\nimport GridLayout from 'react-grid-layout';\nimport Toggle from 'react-toggle';\nimport NumericInput from 'react-numeric-input';\nimport Photo from './Photo.js';\nimport axios from 'axios';\nimport { WidgetLoader, Widget } from 'react-cloudinary-upload-widget';\nimport FileUploader from \"./fileUploader\";\n\nconst backendUrl = 'http://localhost:8000';\n\nfunction downloadCsv(csvString) {\n  // Convert the CSV string to a Blob\n  const blob = new Blob([csvString], { type: \"text/csv;charset=utf-8;\" });\n\n  // Create a URL for the Blob\n  const url = URL.createObjectURL(blob);\n\n  // Create a temporary <a> element to initiate the download\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.setAttribute(\"download\", \"data.csv\");\n\n  // Append the <a> element to the DOM\n  document.body.appendChild(link);\n\n  // Initiate the download\n  link.click();\n\n  // Remove the <a> element from the DOM\n  document.body.removeChild(link);\n\n  // Release the URL object\n  URL.revokeObjectURL(url);\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numCols: 2,\n      numRows: 3,\n      useCustomDims: false,\n      tNumerator: -1,\n      tDenominator: 1000,\n      startSelector: 0,\n      endSelector: 0,\n      startSelLastChange: false,\n      useColumns: false,\n      tRows: [1/3, 2/3],\n      tCols: [1/2],\n      vertices: [],\n      selectedFile: null\n    };\n\n    // start of methods\n\n    this.handleColChange = this.handleColChange.bind(this);\n    this.handleRowChange = this.handleRowChange.bind(this);\n    this.handleDimChange = this.handleDimChange.bind(this);\n    this.handletNumChange = this.handletNumChange.bind(this);\n    this.handletDomChange = this.handletDomChange.bind(this);\n    this.handleStartSelChange = this.handleStartSelChange.bind(this);\n    this.handleEndSelChange = this.handleEndSelChange.bind(this);\n    this.handleDirectionChange = this.handleDirectionChange.bind(this);\n    this.handleFileChange = this.handleFileChange.bind(this);\n    this.handleDatasetSubmit = this.handleDatasetSubmit.bind(this);\n    this.deleteRows = this.deleteRows.bind(this);\n    this.deleteRows = this.deleteRows.bind(this);\n    this.appendVertex = this.appendVertex.bind(this);\n\n    // end of methods\n    \n\n\n    // tRows and tCols hold the t interpolation value from the start of the line for that column/ row.\n    // the first value of the list is the bottom/ right edge of the first row/ column.\n    this.tCols = [];\n    this.tRows = [];\n    this.photo = null\n  }\n  \n  setUniformTCols() {\n    let ret = [];\n    for (let i = 1; i < this.state.numCols; i++) {\n      ret.push(i/this.state.numCols);\n    }\n    this.tCols = ret;\n  }\n\n  setUniformTRows() {\n    let ret = [];\n    for (let i = 1; i < this.state.numRows; i++) {\n      ret.push(i/this.state.numRows);\n    }\n    this.tRows = ret;\n  }\n\n  ensureSelectorsValid() {\n    if (this.state.startSelector >= this.state.endSelector) {\n      this.setState({endSelector: this.state.startSelector}, () => {\n        if (this.state.useColumns) {\n          this.ensureColumnsValid();\n        } else {\n          this.ensureRowsValid();\n        }\n      });\n    } else {\n      if (this.state.useColumns) {\n        this.ensureColumnsValid();\n      } else {\n        this.ensureRowsValid();\n      }\n    }\n\n  }\n\n  ensureColumnsValid() {\n      let newStartSel = -1;\n      let newEndSel = -1;\n      let newTNumerator;\n      if (this.state.startSelector >= this.state.numCols) {\n        newStartSel = this.state.numCols - 1;\n      }\n      if (this.state.startSelector <= 0) {\n        newStartSel = 0;\n      }\n      if (this.state.endSelector >= this.state.numCols) {\n        newEndSel = this.state.numCols - 1;\n      }\n      if (this.state.endSelector <= 0) {\n        newEndSel = 0;\n      }\n      if (this.state.startSelector > this.state.endSelector) {\n        newEndSel = this.state.startSelector;\n      }\n\n      if (newStartSel === -1) {\n        newStartSel = this.state.startSelector;\n      }\n\n      if (newEndSel === -1) {\n        newEndSel = this.state.endSelector;\n      }\n\n      if (this.state.startSelector === 0) {\n        newTNumerator = -1;\n      } else {\n        newTNumerator = this.tCols[newStartSel - 1] * this.state.tDenominator;\n      }\n\n\n\n\n      this.setState({\n        startSelector: newStartSel,\n        endSelector: newEndSel,\n        tNumerator: newTNumerator\n      });\n      \n  }\n\n  ensureRowsValid() {\n    let newStartSel = -1;\n    let newEndSel = -1;\n    let newTNumerator;\n\n    if (this.state.startSelector >= this.state.numRows) {\n      newStartSel = this.state.numRows - 1;\n    }\n    if (this.state.startSelector <= 0) {\n      newStartSel = 0;\n    }\n    if (this.state.endSelector >= this.state.numRows) {\n      newEndSel = this.state.numRows - 1;\n    }\n    if (this.state.endSelector <= 0) {\n      newEndSel = 0;\n    }\n    if (this.state.startSelector > this.state.endSelector) {\n      newEndSel = this.state.startSelector;\n    }\n\n    if (newStartSel === -1) {\n      newStartSel = this.state.startSelector;\n    }\n\n    if (newEndSel === -1) {\n      newEndSel = this.state.endSelector;\n    }\n\n    if (this.state.startSelector === 0) {\n      newTNumerator = -1;\n    } else {\n      newTNumerator = this.tRows[newStartSel - 1] * this.state.tDenominator;\n    }\n\n    this.setState({\n      startSelector: newStartSel,\n      endSelector: newEndSel,\n      tNumerator: newTNumerator\n    });\n  }\n\n  handleColChange(event) {\n    if (event < 0) {\n      this.setState({numCols: 0});\n    }\n      this.setState({numCols: event})\n    let ret = [];\n    for (let i = 1; i < this.state.numCols; i++) {\n      ret.push(i/this.state.numCols);\n    }\n    this.setState({tCols: ret, numCols: event})\n  }\n\n  handleRowChange(event) {\n    if (event < 0) {\n        this.setState({numRows: 0});\n    }\n    let ret = [];\n    for (let i = 1; i < this.state.numRows; i++) {\n      ret.push(i/this.state.numRows);\n    }\n    this.setState({tRows: ret, numRows: event});\n  }\n\n  handleDimChange() {\n    if (this.state.useCustomDims){\n      this.setState({useCustomDims: false});\n    } else {\n      this.setState({useCustomDims: true});\n    }\n  }\n\n  handletNumChange(event) {\n    if (this.state.useCustomDims) {\n      let ret;\n      let diff;\n      if (this.state.useColumns) {\n        ret = this.state.tCols;\n        diff = (event / this.state.tDenominator) - this.state.tCols[this.state.startSelector - 1];\n\n        for (let i = this.state.startSelector; i <= this.state.endSelector; i++) {\n\n          ret[i - 1] += diff;\n        }\n        this.setState({tNumerator: event, tCols: ret}, () => {\n          this.ensureSelectorsValid();\n        });\n      } else {\n        ret = this.state.tRows;\n        diff = (event / this.state.tDenominator) - this.state.tRows[this.state.startSelector - 1];\n        for (let i = this.state.startSelector; i <= this.state.endSelector; i++) {\n\n          ret[i - 1] += diff;\n        }\n\n        this.setState({tNumerator: event, tRows: ret}, () => {\n          this.ensureSelectorsValid();\n        });\n      };\n      \n    };\n\n  }\n\n  handletDomChange(event) {\n    var newtNum = (this.state.tNumerator / this.state.tDenominator) * event\n    this.setState({tDenominator: event, tNumerator: newtNum});\n    this.ensureSelectorsValid();\n  }\n\n  handleStartSelChange(event) {\n\n    this.setState({startSelector: event}, () => {\n      this.ensureSelectorsValid();\n    });\n\n  }\n\n  handleEndSelChange(event) {\n    \n    this.setState({endSelector: event}, () => {\n      this.ensureSelectorsValid();\n    });\n\n  }\n\n  deleteRows() {\n\n    var numLines = this.state.endSelector - this.state.startSelector + 1;\n    var lst;\n    if (this.state.useColumns) {\n      lst = this.state.tCols;\n      var currNumCols = this.state.numCols;\n      lst.splice(this.state.startSelector - 1, numLines);\n      this.setState({tCols: lst, numCols: currNumCols - numLines, endSelector: this.state.startSelector},\n          () => {\n        this.ensureSelectorsValid()\n          });\n    } else {\n      lst = this.state.tRows;\n      var currNumRows = this.state.numRows;\n      lst.splice(this.state.startSelector - 1, numLines);\n      this.setState({tRows: lst, numRows: currNumRows - numLines, endSelector: this.state.startSelector},\n          () => {\n        this.ensureSelectorsValid()\n          });\n    }\n  }\n\n  handleDirectionChange() {\n\n      this.setState({\n        useColumns: !this.state.useColumns,\n        tNumerator: this.state.tRows[this.state.startSelector - 1] * this.state.tDenominator\n          },\n          () => {\n        this.ensureSelectorsValid()\n      });\n    \n  }\n\n  handleFileChange(event) {\n    console.log(\"lets gooo func up\");\n    this.setState({selectedFile: event});\n  }\n\n  async handleDatasetSubmit() {\n    // Create an object of formData\n\n    let verticesList = [];\n    for (let i = 0; i < this.state.vertices.length; i++) {\n      verticesList.push(JSON.stringify(this.state.vertices[i]))\n    };\n    let formData = new FormData();\n    formData.append(\"selectedFile\", this.state.selectedFile, this.state.selectedFile.name);\n    formData.append(\"numCols\", this.state.numCols);\n    formData.append(\"numRows\", this.state.numRows);\n    formData.append(\"tRows\", this.state.tRows);\n    formData.append(\"tCols\", this.state.tCols);\n    formData.append(\"vertices\", verticesList);\n    formData.append(\"username\", this.state.username);\n\n    console.log(formData);\n    const response = await axios.post(backendUrl, formData, {\n      headers: {\n        'content-type': 'multipart/form-data'\n      }\n    })\n\n    console.log(response);\n\n    downloadCsv(response.data.result)\n\n\n\n\n  }\n\n  appendVertex(vertex) {\n    let newVertices = this.state.vertices;\n    newVertices.push(vertex);\n    this.setState({vertices: newVertices})\n  }\n\n  render() {\n    //ensuring that they are the same at the start of the loop\n    \n    const layout = [\n      { i: \"photo\", x: 0, y: 0, w: 1, h: 5, static: true },\n      { i: \"title\", x: 1, y: 0, w: 1, h: 1, static: true },\n      { i: \"cols\", x: 1, y: 1, w: 1, h: 1, static: true },\n      { i: \"rows\", x: 1, y: 2, w: 1, h: 1, static: true },\n      { i: \"gridDimToggle\", x: 1, y: 3, w: 1, h: 3, static: true },\n      { i: \"tValDisplay\", x: 1, y: 6, w: 1, h: 3, static: true },\n      { i: \"colOrRow\", x: 1, y: 9, w: 1, h: 3, static: true },\n      { i: \"descriptor\", x: 1, y: 12, w: 1, h: 2, static: true },\n      { i: \"startSelector\", x: 1, y: 14, w: 1, h: 1, static: true },\n      { i: \"endSelector\", x: 1, y: 15, w: 1, h: 1, static: true },\n      { i: \"tModifier\", x: 1, y: 16, w: 1, h: 1, static: true },\n      { i: \"rowDeleteButton\", x: 1, y: 17, w: 1, h: 1, static: true },\n      { i: \"fileChoiceButton\", x: 1, y: 18, w: 1, h: 1, static: true },\n      { i: \"fileSubmitButton\", x: 1, y: 20, w: 1, h: 1, static: true }\n      \n    ];\n    if (!this.state.useCustomDims) {\n      this.setUniformTCols();\n      this.setUniformTRows();\n    } else {\n      this.tRows = this.state.tRows;\n      this.tCols = this.state.tCols;\n    }\n    console.log(this.state.selectedFile)\n    \n    this.photo = <Photo numCols={this.state.numCols} numRows={this.state.numRows}\n                    tCols={this.tCols} tRows={this.tRows}\n                    startSelector={this.state.startSelector} endSelector={this.state.endSelector}\n                    useColumns={this.state.useColumns} selectedPhoto={this.state.selectedFile}\n                    vertexChange = {this.appendVertex}/>;\n\n    return (<article>\n      <GridLayout\n        className=\"layout\"\n        layout={layout}\n        cols={2}\n        rowHeight={30}\n        width={2300}\n      >\n        <div key=\"photo\">\n          <ReactCursorPosition>\n            {this.photo}\n          </ReactCursorPosition>\n        </div>\n        <div key=\"title\">\n          Table Scanner -> Super Fun\n        </div>\n        <div key=\"cols\">\n          <label>\n            # Columns:\n            <NumericInput precision={0} value={this.state.numCols} step={1} onChange={this.handleColChange}/>\n          </label>\n        </div> \n        <div key=\"rows\">\n          <label>\n            # Rows:\n            <NumericInput precision={0} value={this.state.numRows} step={1} onChange={this.handleRowChange}/>\n          </label>\n        </div>\n\n        <div key=\"gridDimToggle\">\n          <Toggle\n              id='dimToggle'\n              defaultChecked={this.state.useCustomDims}\n              onChange={this.handleDimChange} />\n            <label htmlFor='dimToggle'>Use Custom Grid Dimensions</label>\n        </div>\n        <div key=\"tValDisplay\">\n            Column t values:<br/>\n            {JSON.stringify(this.tCols.map(x => x.toPrecision(3)))}<br/>\n            Row t values:<br/>\n            {JSON.stringify(this.tRows.map(x => x.toPrecision(3)))}\n        </div>\n        <div key=\"colOrRow\">\n          <Toggle\n              id='colToggle'\n              defaultChecked={this.state.useColumns}\n              onChange={this.handleDirectionChange} />\n            <label htmlFor='colToggle'>Move Column/ Columns (otherwise moving rows)</label>\n        </div>\n        <div key=\"descriptor\">\n          <label>\n            Row/ Column Numbers start from either top \n            <br/> \n            or left not including the outside boundaries.\n            <br/>\n            (first line inside is 1)\n          </label>\n        </div>\n        <div key=\"startSelector\">\n          <label>\n            Row/ Column Number Min:\n            <NumericInput precision={0} value={this.state.startSelector} step={1} onChange={this.handleStartSelChange}/>\n          </label>\n        </div>\n        <div key=\"endSelector\">\n          <label>\n            Row/ Column Number Max:\n            <NumericInput precision={0} value={this.state.endSelector} step={1} onChange={this.handleEndSelChange}/>\n          </label>\n        </div>\n        <div key=\"tModifier\">\n          <label>\n            t = \n            <NumericInput precision={0} value={this.state.tNumerator} step={1} onChange={this.handletNumChange}/>\n             / \n            <NumericInput precision={0} value={this.state.tDenominator} step={1} onChange={this.handletDomChange}/>\n          </label>\n        </div>\n        <div key=\"rowDeleteButton\">\n          <label>\n            <button onClick={this.deleteRows}>\n              Delete Selected Rows\n            </button>\n          </label>\n        </div>\n        <div key=\"fileChoiceButton\">\n          <label>\n            <FileUploader component={this} />\n\n          </label>\n        </div>\n        <div key=\"fileSubmitButton\">\n          <button onClick={this.handleDatasetSubmit}>\n              Submit and Download Data\n          </button>\n        </div>\n      </GridLayout>\n      \n    </article>);\n    \n  }\n}\n\nexport default App;\n","/Users/jakemartin/Documents/table-scanner-fullstack/frontend/src/components/Photo.js",[],[],"/Users/jakemartin/Documents/table-scanner-fullstack/frontend/src/components/fileUploader.js",[],[],{"ruleId":"27","severity":1,"message":"28","line":3,"column":10,"nodeType":"29","messageId":"30","endLine":3,"endColumn":21},{"ruleId":"27","severity":1,"message":"31","line":3,"column":23,"nodeType":"29","messageId":"30","endLine":3,"endColumn":42},{"ruleId":"27","severity":1,"message":"32","line":10,"column":10,"nodeType":"29","messageId":"30","endLine":10,"endColumn":22},{"ruleId":"27","severity":1,"message":"33","line":10,"column":24,"nodeType":"29","messageId":"30","endLine":10,"endColumn":30},"no-unused-vars","'GoogleLogin' is defined but never used.","Identifier","unusedVar","'GoogleOAuthProvider' is defined but never used.","'WidgetLoader' is defined but never used.","'Widget' is defined but never used."]