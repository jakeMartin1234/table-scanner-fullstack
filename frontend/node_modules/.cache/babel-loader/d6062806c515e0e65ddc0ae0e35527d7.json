{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jakemartin/Documents/table-scanner-fullstack/frontend/node_modules/@babel/runtime/regenerator/index.js\";\nimport React, { useEffect } from 'react';\nimport axios from 'axios';\n\nvar WidgetButton = function WidgetButton(_ref) {\n  var myWidgetFunction = _ref.myWidgetFunction,\n      style = _ref.style,\n      buttonText = _ref.buttonText,\n      buttonType = _ref.buttonType;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    type: buttonType,\n    id: \"cloudinary_upload_button\",\n    style: style || {\n      color: 'white',\n      border: 'none',\n      width: '120px',\n      backgroundColor: 'green',\n      borderRadius: '4px',\n      height: '25px'\n    },\n    onClick: function onClick() {\n      return myWidgetFunction();\n    }\n  }, buttonText || 'Upload files'));\n};\n\nWidgetButton.defaultProps = {\n  buttonType: 'button'\n};\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar instance = axios.create();\ninstance.interceptors.response.use(function (response) {\n  return response.data;\n});\n\nvar getterFunction = function getterFunction(_ref) {\n  var url = _ref.url,\n      data = _ref.data,\n      accepts = _ref.accepts,\n      contentType = _ref.contentType,\n      withCredentials = _ref.withCredentials;\n  instance.defaults.headers.common['Accepts'] = accepts;\n  instance.defaults.headers.common['Content-Type'] = contentType;\n  instance.defaults.withCredentials = withCredentials;\n  var options = {\n    url: url + '?nocache=' + new Date().getTime(),\n    method: 'post',\n    data: data\n  };\n  return instance(options);\n};\n\nvar generateSignature = function generateSignature(cb, params, _ref, logging) {\n  var generateSignatureUrl = _ref.generateSignatureUrl,\n      accepts = _ref.accepts,\n      contentType = _ref.contentType,\n      withCredentials = _ref.withCredentials,\n      customPublicId = _ref.customPublicId,\n      eager = _ref.eager,\n      apiKey = _ref.apiKey,\n      resourceType = _ref.resourceType,\n      unique_filename = _ref.unique_filename,\n      use_filename = _ref.use_filename;\n  params = [].concat(params); //params can be a single object or an array of objects\n\n  logging && console.log(params, 'Params');\n  Promise.all(params.map(function (req) {\n    var uploadParams = req;\n    logging && console.log(req);\n    return getterFunction({\n      url: generateSignatureUrl,\n      data: {\n        params_to_sign: _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, req.custom_coordinates && {\n          custom_coordinates: req.custom_coordinates\n        }), eager && {\n          eager: eager\n        }), req.filename_override && {\n          filename_override: req.filename_override\n        }), req.headers && {\n          headers: req.headers\n        }), customPublicId && {\n          public_id: customPublicId\n        }), req.source && {\n          source: req.source\n        }), {}, {\n          timestamp: req.timestamp,\n          unique_filename: req.unique_filename\n        }, req.upload_preset && {\n          upload_preset: req.upload_preset\n        }), {}, {\n          use_filename: use_filename\n        })\n      },\n      accepts: accepts,\n      contentType: contentType,\n      withCredentials: withCredentials\n    }).then(function (response) {\n      logging && console.log(response, 'Signature Response');\n      return Object.assign(_objectSpread2(_objectSpread2(_objectSpread2({}, eager && {\n        eager: eager\n      }), customPublicId && {\n        public_id: customPublicId\n      }), {}, {\n        signature: response,\n        api_key: apiKey,\n        resource_type: resourceType\n      }), uploadParams);\n    });\n  })).then(function (results) {\n    logging && console.log(results, 'Results');\n    cb(results.length === 1 ? results[0] : results);\n  });\n};\n\nvar myWidget = function myWidget(sources, sourceKeys, resourceType, cloudName, uploadPreset, folder, cropping, generateSignatureUrl, onSuccess, onFailure, logging, customPublicId, eager, apiKey, accepts, contentType, withCredentials, use_filename, unique_filename, googleDriveClientId, multiple, widgetStyles, destroy, autoClose) {\n  var widget = !!window.cloudinary && window.cloudinary.createUploadWidget(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({\n    showCompletedButton: true,\n    multiple: multiple,\n    singleUploadAutoClose: autoClose,\n    showAdvancedOptions: true,\n    showPoweredBy: false,\n    styles: widgetStyles,\n    googleDriveClientId: googleDriveClientId,\n    sources: sources\n  }, sourceKeys && sourceKeys), {}, {\n    cloudName: cloudName,\n    uploadPreset: uploadPreset,\n    folder: folder,\n    cropping: cropping,\n    resourceType: resourceType\n  }, generateSignatureUrl && {\n    use_filename: use_filename\n  }), generateSignatureUrl && {\n    eager: eager\n  }), generateSignatureUrl && {\n    unique_filename: unique_filename\n  }), generateSignatureUrl && {\n    prepareUploadParams: function () {\n      var _prepareUploadParams = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cb, params) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return generateSignature(cb, params, {\n                  generateSignatureUrl: generateSignatureUrl,\n                  accepts: accepts,\n                  contentType: contentType,\n                  withCredentials: withCredentials,\n                  customPublicId: customPublicId,\n                  eager: eager,\n                  apiKey: apiKey,\n                  resourceType: resourceType,\n                  unique_filename: unique_filename,\n                  use_filename: use_filename\n                }, logging);\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function prepareUploadParams(_x, _x2) {\n        return _prepareUploadParams.apply(this, arguments);\n      }\n\n      return prepareUploadParams;\n    }()\n  }), function (error, result) {\n    if (!error && result && result.event === 'success') {\n      logging && console.log('Done! Here is the image info: ', result.info);\n      logging && console.log(result);\n      !!onSuccess && onSuccess(result);\n      destroy && widget.destroy();\n    } else if (!!error) {\n      !!onFailure ? onFailure({\n        error: error,\n        result: result\n      }) : logging && console.log({\n        error: error,\n        result: result\n      });\n      destroy && widget.destroy();\n    } else if (!!resourceType && result.info === 'shown') {\n      logging && console.log('setting resourceType'); // document.querySelector(\n      //   '.cloudinary_fileupload'\n      // ).accept = `${resourceType}/*`\n    } else {\n      logging && console.log(result);\n    }\n  });\n  widget.open();\n};\n\nvar UploadWidget = function UploadWidget(_ref) {\n  var _ref$sources = _ref.sources,\n      sources = _ref$sources === void 0 ? [] : _ref$sources,\n      _ref$sourceKeys = _ref.sourceKeys,\n      sourceKeys = _ref$sourceKeys === void 0 ? null : _ref$sourceKeys,\n      _ref$resourceType = _ref.resourceType,\n      resourceType = _ref$resourceType === void 0 ? 'auto' : _ref$resourceType,\n      _ref$cloudName = _ref.cloudName,\n      cloudName = _ref$cloudName === void 0 ? null : _ref$cloudName,\n      _ref$uploadPreset = _ref.uploadPreset,\n      uploadPreset = _ref$uploadPreset === void 0 ? null : _ref$uploadPreset,\n      _ref$buttonText = _ref.buttonText,\n      buttonText = _ref$buttonText === void 0 ? null : _ref$buttonText,\n      _ref$style = _ref.style,\n      style = _ref$style === void 0 ? null : _ref$style,\n      _ref$widgetStyles = _ref.widgetStyles,\n      widgetStyles = _ref$widgetStyles === void 0 ? null : _ref$widgetStyles,\n      _ref$folder = _ref.folder,\n      folder = _ref$folder === void 0 ? null : _ref$folder,\n      _ref$cropping = _ref.cropping,\n      cropping = _ref$cropping === void 0 ? true : _ref$cropping,\n      generateSignatureUrl = _ref.generateSignatureUrl,\n      _ref$onSuccess = _ref.onSuccess,\n      onSuccess = _ref$onSuccess === void 0 ? null : _ref$onSuccess,\n      _ref$onFailure = _ref.onFailure,\n      onFailure = _ref$onFailure === void 0 ? null : _ref$onFailure,\n      _ref$logging = _ref.logging,\n      logging = _ref$logging === void 0 ? true : _ref$logging,\n      _ref$customPublicId = _ref.customPublicId,\n      customPublicId = _ref$customPublicId === void 0 ? null : _ref$customPublicId,\n      _ref$eager = _ref.eager,\n      eager = _ref$eager === void 0 ? null : _ref$eager,\n      _ref$apiKey = _ref.apiKey,\n      apiKey = _ref$apiKey === void 0 ? null : _ref$apiKey,\n      _ref$accepts = _ref.accepts,\n      accepts = _ref$accepts === void 0 ? 'application/json' : _ref$accepts,\n      _ref$contentType = _ref.contentType,\n      contentType = _ref$contentType === void 0 ? 'application/json' : _ref$contentType,\n      _ref$withCredentials = _ref.withCredentials,\n      withCredentials = _ref$withCredentials === void 0 ? true : _ref$withCredentials,\n      _ref$use_filename = _ref.use_filename,\n      use_filename = _ref$use_filename === void 0 ? true : _ref$use_filename,\n      _ref$unique_filename = _ref.unique_filename,\n      unique_filename = _ref$unique_filename === void 0 ? false : _ref$unique_filename,\n      _ref$googleDriveClien = _ref.googleDriveClientId,\n      googleDriveClientId = _ref$googleDriveClien === void 0 ? null : _ref$googleDriveClien,\n      _ref$multiple = _ref.multiple,\n      multiple = _ref$multiple === void 0 ? false : _ref$multiple,\n      _ref$buttonType = _ref.buttonType,\n      buttonType = _ref$buttonType === void 0 ? 'button' : _ref$buttonType,\n      _ref$destroy = _ref.destroy,\n      destroy = _ref$destroy === void 0 ? false : _ref$destroy,\n      _ref$autoClose = _ref.autoClose,\n      autoClose = _ref$autoClose === void 0 ? true : _ref$autoClose; // * put all new variables at the end\n\n  var myWidgetFunction = function myWidgetFunction() {\n    return myWidget(sources, sourceKeys, resourceType, cloudName, uploadPreset, folder, cropping, generateSignatureUrl, onSuccess, onFailure, logging, customPublicId, eager, apiKey, accepts, contentType, withCredentials, use_filename, unique_filename, googleDriveClientId, multiple, widgetStyles, destroy, autoClose);\n  };\n\n  return /*#__PURE__*/React.createElement(WidgetButton, {\n    myWidgetFunction: myWidgetFunction,\n    buttonText: buttonText,\n    buttonType: buttonType,\n    style: style\n  });\n};\n\nvar useScript = function (url) {\n  useEffect(function () {\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = url;\n    script.async = true;\n    document.body.appendChild(script);\n    return function () {\n      document.body.removeChild(script);\n    };\n  }, [url]);\n};\n\nvar WidgetLoader = function WidgetLoader() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, useScript('https://widget.cloudinary.com/v2.0/global/all.js'));\n};\n\nvar Widget = function Widget(props) {\n  return /*#__PURE__*/React.createElement(UploadWidget, props);\n};\n\nexport { Widget, WidgetLoader };","map":{"version":3,"mappings":"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","names":["WidgetButton","myWidgetFunction","style","buttonText","buttonType","React","type","id","color","border","width","backgroundColor","borderRadius","height","onClick","defaultProps","instance","axios","create","interceptors","response","use","data","getterFunction","url","accepts","contentType","withCredentials","defaults","headers","common","options","Date","getTime","method","generateSignature","cb","params","logging","generateSignatureUrl","customPublicId","eager","apiKey","resourceType","unique_filename","use_filename","concat","console","log","Promise","all","map","req","uploadParams","params_to_sign","custom_coordinates","filename_override","public_id","source","timestamp","upload_preset","then","Object","assign","signature","api_key","resource_type","results","length","myWidget","sources","sourceKeys","cloudName","uploadPreset","folder","cropping","onSuccess","onFailure","googleDriveClientId","multiple","widgetStyles","destroy","autoClose","widget","window","cloudinary","createUploadWidget","showCompletedButton","singleUploadAutoClose","showAdvancedOptions","showPoweredBy","styles","prepareUploadParams","_context","error","result","event","info","open","UploadWidget","useEffect","script","document","createElement","src","async","body","appendChild","removeChild","WidgetLoader","useScript","Widget","props"],"sources":["/Users/jakemartin/Documents/table-scanner-fullstack/frontend/node_modules/react-cloudinary-upload-widget/src/components/WidgetButton.js","/Users/jakemartin/Documents/table-scanner-fullstack/frontend/node_modules/react-cloudinary-upload-widget/src/functions/getterFunction.js","/Users/jakemartin/Documents/table-scanner-fullstack/frontend/node_modules/react-cloudinary-upload-widget/src/functions/generateSignature.js","/Users/jakemartin/Documents/table-scanner-fullstack/frontend/node_modules/react-cloudinary-upload-widget/src/functions/myWidget.js","/Users/jakemartin/Documents/table-scanner-fullstack/frontend/node_modules/react-cloudinary-upload-widget/src/components/UploadWidget.js","/Users/jakemartin/Documents/table-scanner-fullstack/frontend/node_modules/react-cloudinary-upload-widget/src/_hooks_/useScript.js","/Users/jakemartin/Documents/table-scanner-fullstack/frontend/node_modules/react-cloudinary-upload-widget/src/index.js"],"sourcesContent":["import React from 'react'\n\nconst WidgetButton = ({ myWidgetFunction, style, buttonText, buttonType }) => (\n  <>\n    <button\n      type={buttonType}\n      id='cloudinary_upload_button'\n      style={\n        style || {\n          color: 'white',\n          border: 'none',\n          width: '120px',\n          backgroundColor: 'green',\n          borderRadius: '4px',\n          height: '25px'\n        }\n      }\n      onClick={() => myWidgetFunction()}\n    >\n      {buttonText || 'Upload files'}\n    </button>\n  </>\n)\nWidgetButton.defaultProps = {\n  buttonType: 'button'\n}\nexport default WidgetButton\n","import axios from 'axios'\n\nconst instance = axios.create()\n\ninstance.interceptors.response.use((response) => response.data)\n\nexport const getterFunction = ({\n  url,\n  data,\n  accepts,\n  contentType,\n  withCredentials\n}) => {\n  instance.defaults.headers.common['Accepts'] = accepts\n  instance.defaults.headers.common['Content-Type'] = contentType\n  instance.defaults.withCredentials = withCredentials\n  const options = {\n    url: url + '?nocache=' + new Date().getTime(),\n    method: 'post',\n    data: data\n  }\n\n  return instance(options)\n}\n","import { getterFunction } from './getterFunction'\n\nconst generateSignature = (\n  cb,\n  params,\n  {\n    generateSignatureUrl,\n    accepts,\n    contentType,\n    withCredentials,\n    customPublicId,\n    eager,\n    apiKey,\n    resourceType,\n    unique_filename,\n    use_filename\n  },\n  logging\n) => {\n  params = [].concat(params) //params can be a single object or an array of objects\n  logging && console.log(params, 'Params')\n  Promise.all(\n    params.map((req) => {\n      const uploadParams = req\n      logging && console.log(req)\n      return getterFunction({\n        url: generateSignatureUrl,\n        data: {\n          params_to_sign: {\n            ...(req.custom_coordinates && {\n              custom_coordinates: req.custom_coordinates\n            }),\n            ...(eager && { eager: eager }),\n            ...(req.filename_override && {\n              filename_override: req.filename_override\n            }),\n            ...(req.headers && { headers: req.headers }),\n            ...(customPublicId && { public_id: customPublicId }),\n            ...(req.source && { source: req.source }),\n            timestamp: req.timestamp,\n            unique_filename: req.unique_filename,\n            ...(req.upload_preset && {\n              upload_preset: req.upload_preset\n            }),\n            use_filename: use_filename\n          }\n        },\n        accepts: accepts,\n        contentType: contentType,\n        withCredentials: withCredentials\n      }).then((response) => {\n        logging && console.log(response, 'Signature Response')\n        return Object.assign(\n          {\n            ...(eager && { eager: eager }),\n            ...(customPublicId && { public_id: customPublicId }),\n            signature: response,\n            api_key: apiKey,\n            resource_type: resourceType\n          },\n          uploadParams\n        )\n      })\n    })\n  ).then((results) => {\n    logging && console.log(results, 'Results')\n    cb(results.length === 1 ? results[0] : results)\n  })\n}\n\nexport default generateSignature\n","import generateSignature from './generateSignature'\n\n// * put all new variables at the end\nconst myWidget = (\n  sources,\n  sourceKeys,\n  resourceType,\n  cloudName,\n  uploadPreset,\n  folder,\n  cropping,\n  generateSignatureUrl,\n  onSuccess,\n  onFailure,\n  logging,\n  customPublicId,\n  eager,\n  apiKey,\n  accepts,\n  contentType,\n  withCredentials,\n  use_filename,\n  unique_filename,\n  googleDriveClientId,\n  multiple,\n  widgetStyles,\n  destroy,\n  autoClose\n) => {\n  const widget =\n    !!window.cloudinary &&\n    window.cloudinary.createUploadWidget(\n      {\n        showCompletedButton: true,\n        multiple: multiple,\n        singleUploadAutoClose: autoClose,\n        showAdvancedOptions: true,\n        showPoweredBy: false,\n        styles: widgetStyles,\n        googleDriveClientId: googleDriveClientId,\n        sources: sources,\n        ...(sourceKeys && sourceKeys),\n        cloudName: cloudName,\n        uploadPreset: uploadPreset,\n        folder: folder,\n        cropping: cropping,\n        resourceType: resourceType,\n        ...(generateSignatureUrl && { use_filename: use_filename }),\n        ...(generateSignatureUrl && { eager: eager }),\n        ...(generateSignatureUrl && { unique_filename: unique_filename }),\n        ...(generateSignatureUrl && {\n          prepareUploadParams: async (cb, params) =>\n            await generateSignature(\n              cb,\n              params,\n              {\n                generateSignatureUrl,\n                accepts,\n                contentType,\n                withCredentials,\n                customPublicId,\n                eager,\n                apiKey,\n                resourceType,\n                unique_filename,\n                use_filename\n              },\n              logging\n            )\n        })\n      },\n      (error, result) => {\n        if (!error && result && result.event === 'success') {\n          logging && console.log('Done! Here is the image info: ', result.info)\n          logging && console.log(result)\n          !!onSuccess && onSuccess(result)\n          destroy && widget.destroy()\n        } else if (!!error) {\n          !!onFailure\n            ? onFailure({ error: error, result: result })\n            : logging && console.log({ error: error, result: result })\n          destroy && widget.destroy()\n        } else if (!!resourceType && result.info === 'shown') {\n          logging && console.log('setting resourceType')\n          // document.querySelector(\n          //   '.cloudinary_fileupload'\n          // ).accept = `${resourceType}/*`\n        } else {\n          logging && console.log(result)\n        }\n      }\n    )\n  widget.open()\n}\n\nexport default myWidget\n","import React from 'react'\nimport WidgetButton from './WidgetButton'\nimport myWidget from '../functions/myWidget'\n\nconst UploadWidget = ({\n  sources = [],\n  sourceKeys = null,\n  resourceType = 'auto',\n  cloudName = null,\n  uploadPreset = null,\n  buttonText = null,\n  style = null,\n  widgetStyles = null,\n  folder = null,\n  cropping = true,\n  generateSignatureUrl,\n  onSuccess = null,\n  onFailure = null,\n  logging = true,\n  customPublicId = null,\n  eager = null,\n  apiKey = null,\n  accepts = 'application/json',\n  contentType = 'application/json',\n  withCredentials = true,\n  use_filename = true,\n  unique_filename = false,\n  googleDriveClientId = null,\n  multiple = false,\n  buttonType = 'button',\n  destroy = false,\n  autoClose = true\n}) => {\n  // * put all new variables at the end\n  const myWidgetFunction = () =>\n    myWidget(\n      sources,\n      sourceKeys,\n      resourceType,\n      cloudName,\n      uploadPreset,\n      folder,\n      cropping,\n      generateSignatureUrl,\n      onSuccess,\n      onFailure,\n      logging,\n      customPublicId,\n      eager,\n      apiKey,\n      accepts,\n      contentType,\n      withCredentials,\n      use_filename,\n      unique_filename,\n      googleDriveClientId,\n      multiple,\n      widgetStyles,\n      destroy,\n      autoClose\n    )\n\n  return (\n    <WidgetButton\n      myWidgetFunction={myWidgetFunction}\n      buttonText={buttonText}\n      buttonType={buttonType}\n      style={style}\n    />\n  )\n}\n\nexport default UploadWidget\n","import { useEffect } from 'react'\n\nexport default (url) => {\n  useEffect(() => {\n    const script = document.createElement('script')\n\n    script.type = 'text/javascript'\n    script.src = url\n    script.async = true\n\n    document.body.appendChild(script)\n\n    return () => {\n      document.body.removeChild(script)\n    }\n  }, [url])\n}\n","import React from 'react'\nimport UploadWidget from './components/UploadWidget'\nimport useScript from './_hooks_/useScript'\n\nexport const WidgetLoader = () => (\n  <>{useScript('https://widget.cloudinary.com/v2.0/global/all.js')}</>\n)\nexport const Widget = (props) => <UploadWidget {...props} />\n"]},"metadata":{},"sourceType":"module"}