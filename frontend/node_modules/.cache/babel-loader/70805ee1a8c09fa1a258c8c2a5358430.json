{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calcGridColWidth = calcGridColWidth;\nexports.calcGridItemPosition = calcGridItemPosition;\nexports.calcGridItemWHPx = calcGridItemWHPx;\nexports.calcWH = calcWH;\nexports.calcXY = calcXY;\nexports.clamp = clamp;\n/*:: import type { Position } from \"./utils\";*/\n\n/*:: export type PositionParams = {\n  margin: [number, number],\n  containerPadding: [number, number],\n  containerWidth: number,\n  cols: number,\n  rowHeight: number,\n  maxRows: number\n};*/\n// Helper for generating column width\n\nfunction calcGridColWidth(positionParams\n/*: PositionParams*/\n)\n/*: number*/\n{\n  var margin = positionParams.margin,\n      containerPadding = positionParams.containerPadding,\n      containerWidth = positionParams.containerWidth,\n      cols = positionParams.cols;\n  return (containerWidth - margin[0] * (cols - 1) - containerPadding[0] * 2) / cols;\n} // This can either be called:\n// calcGridItemWHPx(w, colWidth, margin[0])\n// or\n// calcGridItemWHPx(h, rowHeight, margin[1])\n\n\nfunction calcGridItemWHPx(gridUnits\n/*: number*/\n, colOrRowSize\n/*: number*/\n, marginPx\n/*: number*/\n)\n/*: number*/\n{\n  // 0 * Infinity === NaN, which causes problems with resize contraints\n  if (!Number.isFinite(gridUnits)) return gridUnits;\n  return Math.round(colOrRowSize * gridUnits + Math.max(0, gridUnits - 1) * marginPx);\n}\n/**\n * Return position on the page given an x, y, w, h.\n * left, top, width, height are all in pixels.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calculations.\n * @param  {Number}  x                      X coordinate in grid units.\n * @param  {Number}  y                      Y coordinate in grid units.\n * @param  {Number}  w                      W coordinate in grid units.\n * @param  {Number}  h                      H coordinate in grid units.\n * @return {Position}                       Object containing coords.\n */\n\n\nfunction calcGridItemPosition(positionParams\n/*: PositionParams*/\n, x\n/*: number*/\n, y\n/*: number*/\n, w\n/*: number*/\n, h\n/*: number*/\n, state\n/*: ?Object*/\n)\n/*: Position*/\n{\n  var margin = positionParams.margin,\n      containerPadding = positionParams.containerPadding,\n      rowHeight = positionParams.rowHeight;\n  var colWidth = calcGridColWidth(positionParams);\n  var out = {}; // If resizing, use the exact width and height as returned from resizing callbacks.\n\n  if (state && state.resizing) {\n    out.width = Math.round(state.resizing.width);\n    out.height = Math.round(state.resizing.height);\n  } // Otherwise, calculate from grid units.\n  else {\n    out.width = calcGridItemWHPx(w, colWidth, margin[0]);\n    out.height = calcGridItemWHPx(h, rowHeight, margin[1]);\n  } // If dragging, use the exact width and height as returned from dragging callbacks.\n\n\n  if (state && state.dragging) {\n    out.top = Math.round(state.dragging.top);\n    out.left = Math.round(state.dragging.left);\n  } // Otherwise, calculate from grid units.\n  else {\n    out.top = Math.round((rowHeight + margin[1]) * y + containerPadding[1]);\n    out.left = Math.round((colWidth + margin[0]) * x + containerPadding[0]);\n  }\n\n  return out;\n}\n/**\n * Translate x and y coordinates from pixels to grid units.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calculations.\n * @param  {Number} top                     Top position (relative to parent) in pixels.\n * @param  {Number} left                    Left position (relative to parent) in pixels.\n * @param  {Number} w                       W coordinate in grid units.\n * @param  {Number} h                       H coordinate in grid units.\n * @return {Object}                         x and y in grid units.\n */\n\n\nfunction calcXY(positionParams\n/*: PositionParams*/\n, top\n/*: number*/\n, left\n/*: number*/\n, w\n/*: number*/\n, h\n/*: number*/\n)\n/*: { x: number, y: number }*/\n{\n  var margin = positionParams.margin,\n      cols = positionParams.cols,\n      rowHeight = positionParams.rowHeight,\n      maxRows = positionParams.maxRows;\n  var colWidth = calcGridColWidth(positionParams); // left = colWidth * x + margin * (x + 1)\n  // l = cx + m(x+1)\n  // l = cx + mx + m\n  // l - m = cx + mx\n  // l - m = x(c + m)\n  // (l - m) / (c + m) = x\n  // x = (left - margin) / (coldWidth + margin)\n\n  var x = Math.round((left - margin[0]) / (colWidth + margin[0]));\n  var y = Math.round((top - margin[1]) / (rowHeight + margin[1])); // Capping\n\n  x = clamp(x, 0, cols - w);\n  y = clamp(y, 0, maxRows - h);\n  return {\n    x: x,\n    y: y\n  };\n}\n/**\n * Given a height and width in pixel values, calculate grid units.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calcluations.\n * @param  {Number} height                  Height in pixels.\n * @param  {Number} width                   Width in pixels.\n * @param  {Number} x                       X coordinate in grid units.\n * @param  {Number} y                       Y coordinate in grid units.\n * @return {Object}                         w, h as grid units.\n */\n\n\nfunction calcWH(positionParams\n/*: PositionParams*/\n, width\n/*: number*/\n, height\n/*: number*/\n, x\n/*: number*/\n, y\n/*: number*/\n)\n/*: { w: number, h: number }*/\n{\n  var margin = positionParams.margin,\n      maxRows = positionParams.maxRows,\n      cols = positionParams.cols,\n      rowHeight = positionParams.rowHeight;\n  var colWidth = calcGridColWidth(positionParams); // width = colWidth * w - (margin * (w - 1))\n  // ...\n  // w = (width + margin) / (colWidth + margin)\n\n  var w = Math.round((width + margin[0]) / (colWidth + margin[0]));\n  var h = Math.round((height + margin[1]) / (rowHeight + margin[1])); // Capping\n\n  w = clamp(w, 0, cols - x);\n  h = clamp(h, 0, maxRows - y);\n  return {\n    w: w,\n    h: h\n  };\n} // Similar to _.clamp\n\n\nfunction clamp(num\n/*: number*/\n, lowerBound\n/*: number*/\n, upperBound\n/*: number*/\n)\n/*: number*/\n{\n  return Math.max(Math.min(num, upperBound), lowerBound);\n}","map":{"version":3,"sources":["/Users/jakemartin/Documents/table-scanner-fullstack/frontend/node_modules/react-grid-layout/build/calculateUtils.js"],"names":["Object","defineProperty","exports","value","calcGridColWidth","calcGridItemPosition","calcGridItemWHPx","calcWH","calcXY","clamp","positionParams","margin","containerPadding","containerWidth","cols","gridUnits","colOrRowSize","marginPx","Number","isFinite","Math","round","max","x","y","w","h","state","rowHeight","colWidth","out","resizing","width","height","dragging","top","left","maxRows","num","lowerBound","upperBound","min"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calcGridColWidth = calcGridColWidth;\nexports.calcGridItemPosition = calcGridItemPosition;\nexports.calcGridItemWHPx = calcGridItemWHPx;\nexports.calcWH = calcWH;\nexports.calcXY = calcXY;\nexports.clamp = clamp;\n\n/*:: import type { Position } from \"./utils\";*/\n\n/*:: export type PositionParams = {\n  margin: [number, number],\n  containerPadding: [number, number],\n  containerWidth: number,\n  cols: number,\n  rowHeight: number,\n  maxRows: number\n};*/\n// Helper for generating column width\nfunction calcGridColWidth(positionParams\n/*: PositionParams*/\n)\n/*: number*/\n{\n  var margin = positionParams.margin,\n      containerPadding = positionParams.containerPadding,\n      containerWidth = positionParams.containerWidth,\n      cols = positionParams.cols;\n  return (containerWidth - margin[0] * (cols - 1) - containerPadding[0] * 2) / cols;\n} // This can either be called:\n// calcGridItemWHPx(w, colWidth, margin[0])\n// or\n// calcGridItemWHPx(h, rowHeight, margin[1])\n\n\nfunction calcGridItemWHPx(gridUnits\n/*: number*/\n, colOrRowSize\n/*: number*/\n, marginPx\n/*: number*/\n)\n/*: number*/\n{\n  // 0 * Infinity === NaN, which causes problems with resize contraints\n  if (!Number.isFinite(gridUnits)) return gridUnits;\n  return Math.round(colOrRowSize * gridUnits + Math.max(0, gridUnits - 1) * marginPx);\n}\n/**\n * Return position on the page given an x, y, w, h.\n * left, top, width, height are all in pixels.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calculations.\n * @param  {Number}  x                      X coordinate in grid units.\n * @param  {Number}  y                      Y coordinate in grid units.\n * @param  {Number}  w                      W coordinate in grid units.\n * @param  {Number}  h                      H coordinate in grid units.\n * @return {Position}                       Object containing coords.\n */\n\n\nfunction calcGridItemPosition(positionParams\n/*: PositionParams*/\n, x\n/*: number*/\n, y\n/*: number*/\n, w\n/*: number*/\n, h\n/*: number*/\n, state\n/*: ?Object*/\n)\n/*: Position*/\n{\n  var margin = positionParams.margin,\n      containerPadding = positionParams.containerPadding,\n      rowHeight = positionParams.rowHeight;\n  var colWidth = calcGridColWidth(positionParams);\n  var out = {}; // If resizing, use the exact width and height as returned from resizing callbacks.\n\n  if (state && state.resizing) {\n    out.width = Math.round(state.resizing.width);\n    out.height = Math.round(state.resizing.height);\n  } // Otherwise, calculate from grid units.\n  else {\n    out.width = calcGridItemWHPx(w, colWidth, margin[0]);\n    out.height = calcGridItemWHPx(h, rowHeight, margin[1]);\n  } // If dragging, use the exact width and height as returned from dragging callbacks.\n\n\n  if (state && state.dragging) {\n    out.top = Math.round(state.dragging.top);\n    out.left = Math.round(state.dragging.left);\n  } // Otherwise, calculate from grid units.\n  else {\n    out.top = Math.round((rowHeight + margin[1]) * y + containerPadding[1]);\n    out.left = Math.round((colWidth + margin[0]) * x + containerPadding[0]);\n  }\n\n  return out;\n}\n/**\n * Translate x and y coordinates from pixels to grid units.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calculations.\n * @param  {Number} top                     Top position (relative to parent) in pixels.\n * @param  {Number} left                    Left position (relative to parent) in pixels.\n * @param  {Number} w                       W coordinate in grid units.\n * @param  {Number} h                       H coordinate in grid units.\n * @return {Object}                         x and y in grid units.\n */\n\n\nfunction calcXY(positionParams\n/*: PositionParams*/\n, top\n/*: number*/\n, left\n/*: number*/\n, w\n/*: number*/\n, h\n/*: number*/\n)\n/*: { x: number, y: number }*/\n{\n  var margin = positionParams.margin,\n      cols = positionParams.cols,\n      rowHeight = positionParams.rowHeight,\n      maxRows = positionParams.maxRows;\n  var colWidth = calcGridColWidth(positionParams); // left = colWidth * x + margin * (x + 1)\n  // l = cx + m(x+1)\n  // l = cx + mx + m\n  // l - m = cx + mx\n  // l - m = x(c + m)\n  // (l - m) / (c + m) = x\n  // x = (left - margin) / (coldWidth + margin)\n\n  var x = Math.round((left - margin[0]) / (colWidth + margin[0]));\n  var y = Math.round((top - margin[1]) / (rowHeight + margin[1])); // Capping\n\n  x = clamp(x, 0, cols - w);\n  y = clamp(y, 0, maxRows - h);\n  return {\n    x: x,\n    y: y\n  };\n}\n/**\n * Given a height and width in pixel values, calculate grid units.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calcluations.\n * @param  {Number} height                  Height in pixels.\n * @param  {Number} width                   Width in pixels.\n * @param  {Number} x                       X coordinate in grid units.\n * @param  {Number} y                       Y coordinate in grid units.\n * @return {Object}                         w, h as grid units.\n */\n\n\nfunction calcWH(positionParams\n/*: PositionParams*/\n, width\n/*: number*/\n, height\n/*: number*/\n, x\n/*: number*/\n, y\n/*: number*/\n)\n/*: { w: number, h: number }*/\n{\n  var margin = positionParams.margin,\n      maxRows = positionParams.maxRows,\n      cols = positionParams.cols,\n      rowHeight = positionParams.rowHeight;\n  var colWidth = calcGridColWidth(positionParams); // width = colWidth * w - (margin * (w - 1))\n  // ...\n  // w = (width + margin) / (colWidth + margin)\n\n  var w = Math.round((width + margin[0]) / (colWidth + margin[0]));\n  var h = Math.round((height + margin[1]) / (rowHeight + margin[1])); // Capping\n\n  w = clamp(w, 0, cols - x);\n  h = clamp(h, 0, maxRows - y);\n  return {\n    w: w,\n    h: h\n  };\n} // Similar to _.clamp\n\n\nfunction clamp(num\n/*: number*/\n, lowerBound\n/*: number*/\n, upperBound\n/*: number*/\n)\n/*: number*/\n{\n  return Math.max(Math.min(num, upperBound), lowerBound);\n}"]},"metadata":{},"sourceType":"script"}