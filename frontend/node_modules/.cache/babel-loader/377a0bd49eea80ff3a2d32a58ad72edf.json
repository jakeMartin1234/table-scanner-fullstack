{"ast":null,"code":"'use strict';\n\nimport utils from '../utils.js';\nimport parseHeaders from '../helpers/parseHeaders.js';\nconst $internals = Symbol('internals');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while (match = tokensRE.exec(str)) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nfunction isValidHeaderName(str) {\n  return /^[-_a-zA-Z]+$/.test(str.trim());\n}\n\nfunction matchHeaderValue(context, value, header, filter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (!utils.isString(value)) return;\n\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim().toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n    return char.toUpperCase() + str;\n  });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(' ' + header);\n  ['get', 'set', 'has'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function (arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n\n      const key = utils.findKey(self, lHeader);\n\n      if (!key || self[key] === undefined || _rewrite === true || _rewrite === undefined && self[key] !== false) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) => utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite);\n    } else if (utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError('parser must be boolean|regexp|function');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n\n    while (i--) {\n      const key = keys[i];\n\n      if (!matcher || matchHeaderValue(this, this[key], key, matcher)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n\n    return deleted;\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n      headers[normalized] = true;\n    });\n    return this;\n  }\n\n  concat() {\n    for (var _len = arguments.length, targets = new Array(_len), _key = 0; _key < _len; _key++) {\n      targets[_key] = arguments[_key];\n    }\n\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);\n    });\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(_ref => {\n      let [header, value] = _ref;\n      return header + ': ' + value;\n    }).join('\\n');\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'AxiosHeaders';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first) {\n    const computed = new this(first);\n\n    for (var _len2 = arguments.length, targets = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      targets[_key2 - 1] = arguments[_key2];\n    }\n\n    targets.forEach(target => computed.set(target));\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = this[$internals] = {\n      accessors: {}\n    };\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n    return this;\n  }\n\n}\n\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);\nutils.freezeMethods(AxiosHeaders.prototype);\nutils.freezeMethods(AxiosHeaders);\nexport default AxiosHeaders;","map":{"version":3,"sources":["/Users/jakemartin/Documents/table-scanner-fullstack/frontend/node_modules/axios/lib/core/AxiosHeaders.js"],"names":["utils","parseHeaders","$internals","Symbol","normalizeHeader","header","String","trim","toLowerCase","normalizeValue","value","isArray","map","parseTokens","str","tokens","Object","create","tokensRE","match","exec","isValidHeaderName","test","matchHeaderValue","context","filter","isFunction","call","isString","indexOf","isRegExp","formatHeader","replace","w","char","toUpperCase","buildAccessors","obj","accessorName","toCamelCase","forEach","methodName","defineProperty","arg1","arg2","arg3","configurable","AxiosHeaders","constructor","headers","set","valueOrRewrite","rewrite","self","setHeader","_value","_header","_rewrite","lHeader","Error","key","findKey","undefined","setHeaders","isPlainObject","get","parser","TypeError","has","matcher","delete","deleted","deleteHeader","clear","keys","i","length","normalize","format","normalized","concat","targets","toJSON","asStrings","join","iterator","entries","toString","toStringTag","from","thing","first","computed","target","accessor","internals","accessors","prototype","defineAccessor","freezeMethods"],"mappings":"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","sourcesContent":["'use strict';\n\nimport utils from '../utils.js';\nimport parseHeaders from '../helpers/parseHeaders.js';\n\nconst $internals = Symbol('internals');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while ((match = tokensRE.exec(str))) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nfunction isValidHeaderName(str) {\n  return /^[-_a-zA-Z]+$/.test(str.trim());\n}\n\nfunction matchHeaderValue(context, value, header, filter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (!utils.isString(value)) return;\n\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim()\n    .toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n      return char.toUpperCase() + str;\n    });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(' ' + header);\n\n  ['get', 'set', 'has'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n\n      const key = utils.findKey(self, lHeader);\n\n      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) =>\n      utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite)\n    } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError('parser must be boolean|regexp|function');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n\n    while (i--) {\n      const key = keys[i];\n      if(!matcher || matchHeaderValue(this, this[key], key, matcher)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n\n    return deleted;\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n\n      headers[normalized] = true;\n    });\n\n    return this;\n  }\n\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);\n    });\n\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\\n');\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'AxiosHeaders';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first, ...targets) {\n    const computed = new this(first);\n\n    targets.forEach((target) => computed.set(target));\n\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = (this[$internals] = {\n      accessors: {}\n    });\n\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n\n    return this;\n  }\n}\n\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);\n\nutils.freezeMethods(AxiosHeaders.prototype);\nutils.freezeMethods(AxiosHeaders);\n\nexport default AxiosHeaders;\n"]},"metadata":{},"sourceType":"module"}