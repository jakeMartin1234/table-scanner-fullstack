{"ast":null,"code":"var _jsxFileName = \"/Users/jakemartin/Documents/table-scanner-fullstack/frontend/src/components/Photo.js\";\nimport React from 'react';\nimport './App.css';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass blueLine extends React.Component {\n  constructor(x1, y1, x2, y2) {\n    super();\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: 3000,\n      height: 3000,\n      children: /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: this.x1,\n        y1: this.y1,\n        x2: this.x2,\n        y2: this.y2,\n        stroke: \"blue\",\n        strokeWidth: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nclass greenLine extends React.Component {\n  constructor(x1, y1, x2, y2) {\n    super();\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: 3000,\n      height: 3000,\n      children: /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: this.x1,\n        y1: this.y1,\n        x2: this.x2,\n        y2: this.y2,\n        stroke: \"green\",\n        strokeWidth: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nclass Vertex extends React.Component {\n  constructor(x, y) {\n    super();\n    this.x = x;\n    this.y = y;\n    this.radius = 6;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"3000\",\n      height: \"3000\",\n      children: /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: this.x,\n        cy: this.y,\n        r: this.radius\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nclass Photo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.selectedPhoto = \"./img/ExampleGraph.png\";\n    this.state = {\n      startPosx: -1,\n      startPosy: -1,\n      finishPosy: -1,\n      finishPosx: -1,\n      numClicks: 0,\n      width: -1,\n      height: -1\n    };\n    this.rect = false;\n    this.vectors = []; // these two functions hold the <Line/> objects for the rows and columns respectively.\n    // These are modified within the photo based off the tvalues sent in from <App/>\n\n    this.rowList = [];\n    this.colList = [];\n  }\n\n  handleClick() {\n    if (this.state.numClicks < 4) {\n      // this intiallizes the whole grid.\n      // first, add the last corner vector\n      var newVert = new Vertex(this.props.position.x, this.props.position.y);\n      this.vectors.push(newVert);\n      this.props.vertexChange(newVert);\n\n      if (this.state.numClicks === 3) {\n        // now have to fill in lists for new vectors.\n        this.rect = true;\n      }\n\n      this.setState({\n        numClicks: this.state.numClicks + 1\n      });\n    }\n  }\n\n  indexSelected(index, selector) {\n    // boolean function\n    if (this.props.startSelector > 0) {\n      var adjustedIndex = index + 1;\n\n      if (selector === \"cols\" && this.props.useColumns) {\n        if (adjustedIndex >= this.props.startSelector && adjustedIndex <= this.props.endSelector) {\n          return true;\n        }\n      }\n\n      if (selector === \"rows\" && !this.props.useColumns) {\n        if (adjustedIndex >= this.props.startSelector && adjustedIndex <= this.props.endSelector) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  addGridVerticies() {\n    this.colList = [];\n    this.rowList = [];\n\n    for (let i = 0; i < this.props.numCols - 1; i++) {\n      let t = this.props.tCols[i];\n\n      if (this.indexSelected(i, \"cols\")) {\n        this.colList.push(new greenLine(this.vectors[1].x * t + this.vectors[0].x * (1 - t), this.vectors[1].y * t + this.vectors[0].y * (1 - t), this.vectors[2].x * t + this.vectors[3].x * (1 - t), this.vectors[2].y * t + this.vectors[3].y * (1 - t)));\n      } else {\n        this.colList.push(new blueLine(this.vectors[1].x * t + this.vectors[0].x * (1 - t), this.vectors[1].y * t + this.vectors[0].y * (1 - t), this.vectors[2].x * t + this.vectors[3].x * (1 - t), this.vectors[2].y * t + this.vectors[3].y * (1 - t)));\n      }\n    }\n\n    ;\n\n    for (let i = 0; i < this.props.numRows - 1; i++) {\n      let t = this.props.tRows[i];\n\n      if (this.indexSelected(i, \"rows\")) {\n        this.rowList.push(new greenLine(this.vectors[2].x * t + this.vectors[1].x * (1 - t), this.vectors[2].y * t + this.vectors[1].y * (1 - t), this.vectors[3].x * t + this.vectors[0].x * (1 - t), this.vectors[3].y * t + this.vectors[0].y * (1 - t)));\n      } else {\n        this.rowList.push(new blueLine(this.vectors[2].x * t + this.vectors[1].x * (1 - t), this.vectors[2].y * t + this.vectors[1].y * (1 - t), this.vectors[3].x * t + this.vectors[0].x * (1 - t), this.vectors[3].y * t + this.vectors[0].y * (1 - t)));\n      }\n    }\n\n    ;\n  }\n\n  addOuterLines() {\n    this.lines = [];\n    var firstVect = -1;\n    var lastVect = -1;\n    this.vectors.forEach(vector => {\n      if (firstVect === -1) {\n        firstVect = vector;\n      } else {\n        this.lines.push(new blueLine(lastVect.x, lastVect.y, vector.x, vector.y));\n      }\n\n      lastVect = vector;\n    });\n    this.lines.push(new blueLine(lastVect.x, lastVect.y, firstVect.x, firstVect.y));\n  }\n\n  render() {\n    //first thing to do is render all the vercicies\n    this.selectedPhoto = this.props.selectedPhoto;\n    let image = null;\n\n    if (this.selectedPhoto == null) {\n      image = /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"\",\n        onClick: () => this.handleClick(),\n        src: require(\"./ExampleGraph.png\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 15\n      }, this);\n    } else {\n      image = /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"\",\n        src: URL.createObjectURL(this.selectedPhoto),\n        onClick: () => this.handleClick()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 15\n      }, this);\n    }\n\n    if (this.rect) {\n      // outer frame\n      this.addOuterLines();\n      this.addGridVerticies();\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"img-overlay-wrap\",\n        children: [image, this.colList.map((line, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: line.render()\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 15\n        }, this)), this.rowList.map((line, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: line.render()\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 15\n        }, this)), this.lines.map((line, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: line.render()\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 15\n        }, this)), this.vectors.map((vect, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: vect.render()\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this);\n    } else {\n      return image;\n    }\n  }\n\n}\n\nexport default Photo;","map":{"version":3,"sources":["/Users/jakemartin/Documents/table-scanner-fullstack/frontend/src/components/Photo.js"],"names":["React","blueLine","Component","constructor","x1","y1","x2","y2","render","greenLine","Vertex","x","y","radius","Photo","props","handleClick","bind","selectedPhoto","state","startPosx","startPosy","finishPosy","finishPosx","numClicks","width","height","rect","vectors","rowList","colList","newVert","position","push","vertexChange","setState","indexSelected","index","selector","startSelector","adjustedIndex","useColumns","endSelector","addGridVerticies","i","numCols","t","tCols","numRows","tRows","addOuterLines","lines","firstVect","lastVect","forEach","vector","image","require","URL","createObjectURL","map","line","vect"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport '../index.css';\n\n\nclass blueLine extends React.Component {\n\n  constructor(x1, y1, x2, y2) {\n    super();\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n  }\n\n  render() {\n    return (\n          <svg  width={3000} height={3000}>\n            <line x1={this.x1} y1={this.y1} x2={this.x2} y2={this.y2} stroke=\"blue\" strokeWidth=\"5\"/>\n          </svg>\n        );\n  }\n    \n}\n\nclass greenLine extends React.Component {\n\n  constructor(x1, y1, x2, y2) {\n    super();\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n  }\n\n  render() {\n    return (\n          <svg  width={3000} height={3000}>\n            <line x1={this.x1} y1={this.y1} x2={this.x2} y2={this.y2} stroke=\"green\" strokeWidth=\"5\"/>\n          </svg>\n        );\n  }\n    \n}\n\n\n\n\n\nclass Vertex extends React.Component {\n\n  constructor(x, y) {\n    super();\n    this.x = x;\n    this.y = y;\n    this.radius = 6;\n  }\n\n  render () {\n    return (\n        <svg width=\"3000\" height=\"3000\">\n          <circle cx={this.x} cy={this.y} r={this.radius}/>\n        </svg>\n      );\n      \n  }\n    \n}\n\n\nclass Photo extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.selectedPhoto = \"./img/ExampleGraph.png\";\n    this.state = {\n      startPosx: -1,\n      startPosy: -1,\n      finishPosy: -1,\n      finishPosx: -1,\n      numClicks: 0,\n      width: -1,\n      height: -1\n    }\n    this.rect = false;\n    this.vectors = [];\n\n\n    // these two functions hold the <Line/> objects for the rows and columns respectively.\n    // These are modified within the photo based off the tvalues sent in from <App/>\n    this.rowList = [];\n    this.colList = [];\n\n  }\n\n  handleClick() {\n\n    if (this.state.numClicks < 4) {\n      // this intiallizes the whole grid.\n      // first, add the last corner vector\n      var newVert = new Vertex(this.props.position.x, this.props.position.y);\n      this.vectors.push(newVert)\n\n      this.props.vertexChange(newVert);\n      if (this.state.numClicks === 3) {\n          // now have to fill in lists for new vectors.\n\n        this.rect = true;\n      }\n\n\n      this.setState({ numClicks: this.state.numClicks + 1 })\n\n      \n    }\n  }\n\n\n  indexSelected(index, selector) {\n    // boolean function\n    if (this.props.startSelector > 0) {\n      var adjustedIndex = index + 1;\n      if (selector === \"cols\" && this.props.useColumns) {\n        if (adjustedIndex >= this.props.startSelector && adjustedIndex <= this.props.endSelector) {\n          return true;\n        }\n      }\n      if (selector === \"rows\" && !this.props.useColumns) {\n        if (adjustedIndex >= this.props.startSelector && adjustedIndex <= this.props.endSelector) {\n          return true;\n        }\n      }\n    }\n    \n    return false;\n  }\n\n  addGridVerticies() {\n    this.colList = [];\n    this.rowList = [];\n\n    for (let i = 0; i < this.props.numCols - 1; i++) {\n          let t = this.props.tCols[i];\n          if (this.indexSelected(i, \"cols\")) {\n            this.colList.push(new greenLine(this.vectors[1].x * t + this.vectors[0].x * (1 - t),\n              this.vectors[1].y * t + this.vectors[0].y * (1 - t),\n              this.vectors[2].x * t + this.vectors[3].x * (1 - t),\n              this.vectors[2].y * t + this.vectors[3].y * (1 - t)));\n\n          } else {\n            this.colList.push(new blueLine(this.vectors[1].x * t + this.vectors[0].x * (1 - t),\n              this.vectors[1].y * t + this.vectors[0].y * (1 - t),\n              this.vectors[2].x * t + this.vectors[3].x * (1 - t),\n              this.vectors[2].y * t + this.vectors[3].y * (1 - t)));\n          }\n          \n    };\n    for (let i = 0; i < this.props.numRows - 1; i++) {\n          let t = this.props.tRows[i];\n          if (this.indexSelected(i, \"rows\")) {\n            this.rowList.push(new greenLine(this.vectors[2].x * t + this.vectors[1].x * (1 - t),\n              this.vectors[2].y * t + this.vectors[1].y * (1 - t),\n              this.vectors[3].x * t + this.vectors[0].x * (1 - t),\n              this.vectors[3].y * t + this.vectors[0].y * (1 - t)));\n          } else {\n            this.rowList.push(new blueLine(this.vectors[2].x * t + this.vectors[1].x * (1 - t),\n              this.vectors[2].y * t + this.vectors[1].y * (1 - t),\n              this.vectors[3].x * t + this.vectors[0].x * (1 - t),\n              this.vectors[3].y * t + this.vectors[0].y * (1 - t)));\n          }\n          \n    };\n        \n  }\n\n  addOuterLines() {\n    this.lines = [];\n    var firstVect = -1;\n    var lastVect = -1;\n    this.vectors.forEach((vector) => {\n        \n        if (firstVect === -1) {\n            firstVect = vector;\n        } else {\n            this.lines.push(new blueLine(lastVect.x, lastVect.y, vector.x, vector.y));\n        }\n        lastVect = vector;\n        \n      })\n      this.lines.push(new blueLine(lastVect.x, lastVect.y, firstVect.x, firstVect.y));\n  }\n\n  render() {\n\n    //first thing to do is render all the vercicies\n    this.selectedPhoto = this.props.selectedPhoto;\n    let image = null;\n    if (this.selectedPhoto == null) {\n      image = <img alt=\"\" onClick={() => this.handleClick()} src={require(\"./ExampleGraph.png\")}/>;\n    } else {\n      image = <img alt=\"\" src = {URL.createObjectURL(this.selectedPhoto)} onClick={() => this.handleClick()}/>;\n    }\n\n    if (this.rect) {\n      // outer frame\n      this.addOuterLines();\n      this.addGridVerticies();\n\n      return (\n\n        <div className=\"img-overlay-wrap\">\n          {image}\n          {this.colList.map((line, index) => (\n              <React.Fragment key={index}>\n                {line.render()}\n              </React.Fragment>\n          ))}\n          {this.rowList.map((line, index) => (\n              <React.Fragment key={index}>\n                {line.render()}\n              </React.Fragment>\n          ))}\n          {this.lines.map((line, index) => (\n              <React.Fragment key={index}>\n                {line.render()}\n              </React.Fragment>\n          ))}\n          {this.vectors.map((vect, index) => (\n              <React.Fragment key={index}>\n                {vect.render()}\n              </React.Fragment>\n          ))}\n        </div>\n        );\n    } else {\n      return (\n        image\n      );\n    }\n    \n  }\n}\n\nexport default Photo;"]},"metadata":{},"sourceType":"module"}